<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Rainbow</name>
    </assembly>
    <members>
        <member name="T:Rainbow.UI.WebControls.IPaging">
            <summary>
            Common interface for paging controls
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.Percentage">
            <summary>
            Structure that contains percentage values (0 to 100)
            </summary>
        </member>
        <member name="M:Rainbow.UI.DataTypes.Percentage.#ctor(System.Byte)">
            <summary>
            Percentage constructor
            </summary>
            <param name="percent">Byte value from 0 to 100</param>
        </member>
        <member name="M:Rainbow.UI.DataTypes.Percentage.op_Explicit(System.Int32)~Rainbow.UI.DataTypes.Percentage">
            <summary>
            Explicit conversion from int (it may fail)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.DataTypes.Percentage.op_Explicit(System.Byte)~Rainbow.UI.DataTypes.Percentage">
            <summary>
            Explicit conversion from byte (it may fail)
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.DataTypes.Percentage.op_Implicit(Rainbow.UI.DataTypes.Percentage)~System.Int32">
            <summary>
            Implicit conversion to int
            </summary>
            <param name="perc"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.DataTypes.Percentage.op_Implicit(Rainbow.UI.DataTypes.Percentage)~System.Byte">
            <summary>
            Implicit conversion to byte
            </summary>
            <param name="perc"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.DataTypes.Percentage.op_Implicit(Rainbow.UI.DataTypes.Percentage)~System.String">
            <summary>
            Implicit conversion to string
            </summary>
            <param name="perc"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.DataTypes.Percentage.ToString">
            <summary>
            Overridden method ToString
            </summary>
            <returns>The value of percentage in string format</returns>
        </member>
        <member name="P:Rainbow.UI.DataTypes.Percentage.Value">
            <summary>
            The value of the Percentage
            </summary>
        </member>
        <member name="T:Rainbow.UI.AddItemPage">
            <summary>
            AddItemPage inherits from Rainbow.UI.SecurePage <br/>
            Used for add pages<br/>
            Can be inherited
            </summary>
        </member>
        <member name="T:Rainbow.UI.SecurePage">
            <summary>
            SecurePage inherits from Rainbow.UI.Page <br/>
            Used for Security Access pages<br/>
            Can be inherited
            </summary>
        </member>
        <member name="T:Rainbow.UI.Page">
            <summary>
            A template page useful for constructing custom edit pages for module settings.<br/>
            Encapsulates some common code including: moduleid,
            portalSettings and settings, referrer redirection, edit permission,
            cancel event, etc.
            This page is a base page.
            It is named USECURE becuse no check about security is made.
            Usencure page reminds you that you have to do your own security on it.
            </summary>
        </member>
        <member name="F:Rainbow.UI.Page.updateButton">
            <summary>
            Standard update button
            </summary>
        </member>
        <member name="F:Rainbow.UI.Page.deleteButton">
            <summary>
            Standard delete button
            </summary>
        </member>
        <member name="F:Rainbow.UI.Page.cancelButton">
            <summary>
            Standard cancel button
            </summary>
        </member>
        <member name="F:Rainbow.UI.Page.htmlHead">
            <summary>
            Standard html head for pages
            </summary>
        </member>
        <member name="M:Rainbow.UI.Page.CancelBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Cancel Button click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.UpdateBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Update Button click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.DeleteBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Delete Button Click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.OnInit(System.EventArgs)">
            <summary>
            Handles the OnInit event at Page level<br/>
            Performs OnInit events that are common to all Pages<br/>
            Can be overridden
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.OnLoad(System.EventArgs)">
            <summary>
            Handles OnLoad event at Page level<br/>
            Performs OnLoad actions that are common to all Pages.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.OnAdd(System.EventArgs)">
            <summary>
            Handles OnAdd event at Page level<br/>
            Performs OnAdd actions that are common to all Pages<br/>
            Can be overridden
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.OnUpdate(System.EventArgs)">
            <summary>
            Handles OnUpdate event at Page level<br/>
            Performs OnUpdate actions that are common to all Pages<br/>
            Can be overridden
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.OnFlushCache">
            <summary>
            Handles FlushCache event at Page level<br/>
            Performs FlushCache actions that are common to all Pages<br/>
            Can be overridden
            </summary>
        </member>
        <member name="M:Rainbow.UI.Page.OnDelete(System.EventArgs)">
            <summary>
            Handles OnDelete event at Page level<br/>
            Performs OnDelete actions that are common to all Pages<br/>
            Can be overridden
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.Page.OnCancel(System.EventArgs)">
            <summary>
            Handles OnCancel Event at Page level<br/>
            Performs OnCancel actions that are common to all Pages<br/>
            Can be overridden
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:Rainbow.UI.Page.cssFileList">
            <summary>
            List of CSS files to be applied to this page
            </summary>
        </member>
        <member name="F:Rainbow.UI.Page.cssImportList">
            <summary>
            List of CSS blocks to be applied to this page.
            Strings added to this list will injected into a &lt;style&gt;
            block in the page head.
            </summary>
        </member>
        <member name="F:Rainbow.UI.Page.bodyOnLoadList">
            <summary>
            Holds a list of javascript function calls which will be output to the body tag as a semicolon-delimited list in the 'onload' attribute
            </summary>
        </member>
        <member name="F:Rainbow.UI.Page.additionalMetaElements">
            <summary>
            Stores any additional Meta entries requested by modules or other code.
            </summary>
        </member>
        <member name="M:Rainbow.UI.Page.LoadSettings">
            <summary>
            Load settings
            </summary>
        </member>
        <member name="M:Rainbow.UI.Page.RedirectBackToReferringPage">
            <summary>
            Redirect back to the referring page
            </summary>
        </member>
        <member name="M:Rainbow.UI.Page.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides Render() and writes out &lt;html&gt;, &lt;head&gt; and &lt;body&gt; elements along with page contents.
            </summary>
            <param name="writer">the HtmlTextWriter connected to the output stream</param>
        </member>
        <member name="M:Rainbow.UI.Page.BuildDocType(System.Web.UI.HtmlTextWriter)">
            <summary>
            Builds the DOCTYPE statement when requested by the Render() override.
            </summary>
            <param name="writer">the HtmlTextWriter created by Render()</param>
        </member>
        <member name="M:Rainbow.UI.Page.BuildHtmlBody(System.Web.UI.HtmlTextWriter,System.Web.UI.HtmlControls.HtmlGenericControl)">
            <summary>
            Builds the HTML &lt;body&gt; element 
            </summary>
            <param name="writer">the HtmlTextWriter created by Render()</param>
        </member>
        <member name="M:Rainbow.UI.Page.BuildHtmlHead(System.Web.UI.HtmlTextWriter)">
            <summary>
            Builds the HTML &lt;head&gt; element 
            </summary>
            <param name="writer">the HtmlTextWriter created by Render()</param>
        </member>
        <member name="M:Rainbow.UI.Page.ModuleGuidInCookie">
            <summary>
             Every guid module in tab is set in cookie.
             This method is override in edit &amp; view controls for read the cookie
             and pass or denied access to edit or view module.
             jviladiu@portalServices.net (2004/07/22)
            </summary>
        </member>
        <member name="E:Rainbow.UI.Page.Add">
            <summary>
            The Add event is defined using the event keyword.
            The type of Add is EventHandler.
            </summary>
        </member>
        <member name="E:Rainbow.UI.Page.Update">
            <summary>
            The Update event is defined using the event keyword.
            The type of Update is EventHandler.
            </summary>
        </member>
        <member name="E:Rainbow.UI.Page.FlushCache">
            <summary>
            The FlushCache event is defined using the event keyword.
            The type of FlushCache is EventHandler.
            </summary>
        </member>
        <member name="E:Rainbow.UI.Page.Delete">
            <summary>
            The Delete event is defined using the event keyword.
            The type of Delete is EventHandler.
            </summary>
        </member>
        <member name="E:Rainbow.UI.Page.Cancel">
            <summary>
            The Cancel event is defined using the event keyword.
            The type of Cancel is EventHandler.
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.portalSettings">
            <summary>
            Stores current portal settings
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.TabTitle">
            <summary>
            Page Title
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.TabMetaKeyWords">
            <summary>
            "keywords" meta element
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.TabMetaDescription">
            <summary>
            "description" meta element
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.TabMetaEncoding">
            <summary>
            "encoding" meta element
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.TabMetaOther">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.DocType">
            <summary>
            page DOCTYPE 
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.BodyOtherAttributes">
            <summary>
            Allows &lt;body&gt; attributes (other than onload) to be injected into the &lt;body&gt; tag. 
            Has an automatic append function (i.e. just assign a string value and it will be appended 
            to any current contents). Module developers are therefore responsible for checking for duplicated
            attributes and for the syntax of any strings added. The first programmatic call to the property will
            automatically insert any value set in SiteSettings.
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.UrlReferrer">
            <summary>
            Referring URL
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.TabID">
            <summary>
            Stores current linked module ID if applicable
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.tabSettings">
            <summary>
            Stores current tab settings
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.ModuleID">
            <summary>
            Stores current linked module ID if applicable
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.Module">
            <summary>
            Stores current module if applicable
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.moduleSettings">
            <summary>
            Stores current module settings
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.ItemID">
            <summary>
            Stores current item id
            </summary>
        </member>
        <member name="P:Rainbow.UI.Page.AllowedModules">
            <summary>
             This array is override for edit and view pages
             with the guids allowed to access.
             jviladiu@portalServices.net (2004/07/22)
            </summary>
        </member>
        <member name="M:Rainbow.UI.SecurePage.ModuleGuidInCookie">
            <summary>
            Get the AllowedModules array from page if exists and set the restrictions for use
            For this method work, the user page need override AllowedModules with GUIDS
            </summary>
        </member>
        <member name="M:Rainbow.UI.SecurePage.LoadSettings">
            <summary>
            Load settings
            </summary>
        </member>
        <member name="M:Rainbow.UI.AddItemPage.OnInit(System.EventArgs)">
            <summary>
            Handles OnInit event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddItemPage.OnCancel(System.EventArgs)">
            <summary>
            Handles OnCancel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddItemPage.OnUpdate(System.EventArgs)">
            <summary>
            Handles OnUpdate event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddItemPage.OnDelete(System.EventArgs)">
            <summary>
            Handles OnDelete
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddItemPage.LoadSettings">
            <summary>
            Load settings
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.FCKTextBoxV2">
            <summary>
            FCKTextBoxV2 is a wrapper for FredCK.FCKeditorV2.
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.IHtmlEditor">
            <summary>
            IHtmlEditor is a simple interface that defines 
            some minimal common features between different html editors.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.IHtmlEditor.Text">
            <summary>
            Control Text
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.IHtmlEditor.ImageFolder">
            <summary>
            Control Image Folder
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.IHtmlEditor.Height">
            <summary>
            Control Height
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.IHtmlEditor.Width">
            <summary>
            Control Width
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBoxV2.Rainbow#UI#WebControls#IHtmlEditor#get_Height">
            <summary>
            FCKTextBoxV2 is a wrapper for FredCK.FCKeditorV2.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBoxV2.Rainbow#UI#WebControls#IHtmlEditor#set_Height(System.Web.UI.WebControls.Unit)">
            <summary>
            FCKTextBoxV2 is a wrapper for FredCK.FCKeditorV2.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBoxV2.Rainbow#UI#WebControls#IHtmlEditor#get_Width">
            <summary>
            FCKTextBoxV2 is a wrapper for FredCK.FCKeditorV2.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBoxV2.Rainbow#UI#WebControls#IHtmlEditor#set_Width(System.Web.UI.WebControls.Unit)">
            <summary>
            FCKTextBoxV2 is a wrapper for FredCK.FCKeditorV2.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.FCKTextBoxV2.Text">
            <summary>
            Control Text
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.FCKTextBoxV2.ImageFolder">
            <summary>
            Control Image Folder
            </summary>
        </member>
        <member name="T:Rainbow.DesktopDefault">
            <summary>
            The DesktopDefault.aspx page is used 
            to load and populate each Portal View.
            It accomplishes this by reading the layout configuration 
            of the portal from the Portal Configuration	system, 
            and then using this information to dynamically 
            instantiate portal modules (each implemented 
            as an ASP.NET User Control), and then inject them into the page.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopDefault.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Services.CommunityService">
            <summary>
            The class that implements the community Web service. 
            The community Web service exposes content items from this 
            Rainbow site to the web
            </summary>
        </member>
        <member name="M:Rainbow.Services.CommunityService.GetCommunityContent(Rainbow.Services.ServiceRequestInfo)">
            <summary>
            Returns a ServiceResponseInfo object that represents a 
            a collection of content items.
            </summary>
            <param name="requestInfo"></param>
            <returns>ServiceResponseInfo</returns>
        </member>
        <member name="M:Rainbow.Services.CommunityService.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rainbow.Services.CommunityService.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.EmailAddressList">
            <summary>
            This implementation of the ArrayList class, allows only valid 
            emailadresses to be added to the collection
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.PortalUrlDataType">
            <summary>
            PortalUrlDataType
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.StringDataType">
            <summary>
            StringDataType
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.BaseDataType">
            <summary>
            BaseDataType
            </summary>
        </member>
        <member name="F:Rainbow.UI.DataTypes.BaseDataType.InnerDataType">
            <summary>
            Holds the value
            </summary>
        </member>
        <member name="P:Rainbow.UI.DataTypes.BaseDataType.DataSource">
            <summary>
            Gets DataSource
            Should be overrided from inherited classes
            </summary>
        </member>
        <member name="F:Rainbow.UI.DataTypes.PortalUrlDataType._portalPathPrefix">
            <remarks>
            Change visibility to private because now we cache internal values.
            Could be moved to protected again if we transform in a property and invalidate cache.
            </remarks>
        </member>
        <member name="M:Rainbow.UI.DataTypes.PortalUrlDataType.#ctor(System.String)">
            <summary>
            Use this on portalsetting or when you want turn off automatic discovery
            </summary>
            <param name="PortalFullPath"></param>
        </member>
        <member name="T:Rainbow.Configuration.SettingItemGroup">
            <summary>
            SettingItemGroups, used to sort and group site and module
            settings in SettingsTable. Jes1111
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.NONE">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.THEME_LAYOUT_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.SECURITY_USER_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.CULTURE_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.BUTTON_DISPLAY_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.MODULE_SPECIAL_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.META_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.MISC_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingItemGroup.NAVIGATION_SETTINGS">
            <summary>
                
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.DesktopPortalBanner">
            <summary>
            Default user control placed on top of each administrative page
            </summary>
        </member>
        <member name="F:Rainbow.DesktopModules.DesktopPortalBanner.LayoutPlaceHolder">
            <summary>
            Placeholder for current control
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.DesktopPortalBanner.OnInit(System.EventArgs)">
            <summary>
            Raises OnInitEvent
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Rainbow.BLL.Utils.IWebBagHolder">
            <summary>
            Define the Web Bag Interface as the
            repository for temporary data
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.IWebBagHolder.Item(System.Int32)">
            <summary>
            Get/Set values from integer key
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.IWebBagHolder.Item(System.String)">
            <summary>
            Get/Set values from string key
            </summary>
        </member>
        <member name="T:Rainbow.BLL.Utils.CookieBag">
            <summary>
             This class utilizes cookies to store the data
             Encryption was not added though and may not be complete
            </summary>
            /////////////////////////////////////////////////////////////////////////
        </member>
        <member name="P:Rainbow.BLL.Utils.CookieBag.Item(System.Int32)">
            	<summary>
            	Default property for accessing resources
             <param name="index">
             Index for the desired resource</param>
             <returns>
             Resource string value</returns>
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.CookieBag.Item(System.String)">
            <summary>
            Get Data Value
            </summary>
        </member>
        <member name="T:Rainbow.BLL.Utils.SessionBag">
            
            <summary>
            The Session bag will attempt to use server-side Session Mgmt. However
            in the event session is disabled fallback to cookies; otherwise, fallback
            to the database :(
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.SessionBag.Item(System.Int32)">
            	<summary>
            	Default property for accessing resources
             <param name="index">
             Index for the desired resource</param>
             <returns>
             Resource string value</returns>
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.SessionBag.Item(System.String)">
            <summary>
            get data back
            </summary>
        </member>
        <member name="T:Rainbow.BLL.Utils.ApplicationBag">
            <summary>
            The Application bag will attempt to use server-side Application Mgmt.
            This is the fallback. The database could also be a fallback as well
            but then anonnymous user information would be logged there as well which
            I don't you would want
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.ApplicationBag.Item(System.Int32)">
            	<summary>
            	Default property for accessing resources
             <param name="index">
             Index for the desired resource</param>
             <returns>
             Resource string value</returns>
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.ApplicationBag.Item(System.String)">
            <summary>
            Get data value
            </summary>
        </member>
        <member name="T:Rainbow.BLL.Utils.BagFactory">
            <summary>
            This singleton factory creates the appropriate Bag for a user to hold data
            The data retention mechanism varies.
            </summary>
            //////////////////////////////////////////////////////////////////////
        </member>
        <member name="F:Rainbow.BLL.Utils.BagFactory.instance">
            <summary>
            the singleton class instance (ONLY ONE -- APPLICATION LEVEL )
            </summary>
        </member>
        <member name="M:Rainbow.BLL.Utils.BagFactory.create">
            <summary>
            Create the Bag according to what is available. First use Cookies,
            then try Session and then fallback to Application.
            </summary>
        </member>
        <member name="M:Rainbow.BLL.Utils.BagFactory.create(Rainbow.BLL.Utils.BagFactory.BagFactoryType)">
            <summary>
            Create the Bag according to what is available. First use Cookies,
            then try Session and then fallback to Application.
            </summary>
        </member>
        <member name="M:Rainbow.BLL.Utils.BagFactory.#ctor">
            <summary>
                don't allow for construction outside of this class
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="T:Rainbow.BLL.Utils.BagFactory.BagFactoryType">
            <summary>
            valid bag types
            </summary>
        </member>
        <member name="F:Rainbow.BLL.Utils.BagFactory.BagFactoryType.None">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.BagFactory.BagFactoryType.ApplicationType">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.BagFactory.BagFactoryType.SessionType">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.BagFactory.BagFactoryType.CookieType">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.BagFactory.BagFactoryType.DbType">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Helpers.HTMLText">
            <summary>
            Nice HTMLText helper. Contains both the HTML string
            and a tag-free version of the same string.
            by Manu
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.#ctor(System.String)">
            <summary>
            HTMLText
            </summary>
            <param name="myText"></param>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.CleanHTML(System.String)">
            <summary>
            Removes any HTML tags
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.GetXHtml(System.String)">
            <summary>
            Returns XHTML
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.MatchToLower(System.Text.RegularExpressions.Match)">
            <summary>
            Transforms the match to lowercase
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.QuoteAttibute(System.Text.RegularExpressions.Match)">
            <summary>
            Quote the result
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.QuoteAttibuteEnd(System.Text.RegularExpressions.Match)">
            <summary>
            Quote the result (end tag)
            </summary>
            <param name="m"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.GetAbstractHTML(System.Int32)">
            <summary>
            Gets an abstract HTML of maxLenght characters maximum
            </summary>
            <param name="maxLenght"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.GetAbstractText(System.Int32)">
            <summary>
            Gets an abstract text (no HTML tags!) of maxLenght characters maximum
            </summary>
            <param name="maxLenght"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.GetBreakedHTML(System.Int32)">
            <summary>
            Break the text in rows of rowLenght characters maximum
            using HTML content
            </summary>
            <param name="rowLenght"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.GetBreakedText(System.Int32)">
            <summary>
            Break the text in rows of rowLenght characters maximum,
            using text content, useful for emails
            </summary>
            <param name="rowLenght"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.op_Implicit(Rainbow.Helpers.HTMLText)~System.String">
            <summary>
            Converts the struct to a string value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.HTMLText.op_Implicit(System.String)~Rainbow.Helpers.HTMLText">
            <summary>
            Converts the struct from a string value
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Helpers.HTMLText.InnerHTML">
            <summary>
            InnerHTML
            </summary>
        </member>
        <member name="P:Rainbow.Helpers.HTMLText.InnerXHTML">
            <summary>
            InnerXHTML
            </summary>
        </member>
        <member name="P:Rainbow.Helpers.HTMLText.InnerText">
            <summary>
            InnerText
            Same as InnerHTML but completely tag-free 
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ISearchable">
            <summary>
            Default interface for searchable modules
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ISearchable.SearchSqlSelect(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Searchable module implementation
            </summary>
            <param name="portalID"></param>
            <param name="userID"></param>
            <param name="searchStr"></param>
            <param name="searchField"></param>
        </member>
        <member name="T:Rainbow.CommunityRSS">
            <summary>
            By Jakob Hansen
            This class that implements the community RSS provider. The
            community RSS file exposes content items from this community
            to other community Web sites using standard RSS 0.91 file format.
            
            Special XSLT files for the XmlFeed module has been made to this
            RSS service. Note that RSS feeds comming from this service does
            apply to the RSS 0.91 file format.
            
            Based on CommunityRSS Class V0.2 code (03/26/2003, clauer@dotnet-fr.org)
            to the Community Starter Kit from www.asp.net.
            </summary>
        </member>
        <member name="M:Rainbow.CommunityRSS.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.PagingNumbers">
            <summary>
            The paging control is used to display paging options for controls that
            page through data. This control is necessary since some data rendering 
            controls, such as the DataList, do not support paging and it must be 
            a custom implementation.
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.#ctor">
            <summary>
            Constructor
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.CreateChildControls">
            <summary>
            This event handler adds the children controls and is resonsible
            for determining the template type used for the control.
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.DisplayPager">
            <summary>
            Used to display the pager. Is public so that the parent control can 
            reset the pager when a post back occurs that the pager did not raise.
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.DisplayCurrentPage">
            <summary>
            Displays the current page that the user is viewing
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.DisplayNumericalPaging">
            <summary>
            Controls how the numerical link buttons get rendered
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.DisplayPrevNext">
            <summary>
            Controls how the previous next link buttons get rendered
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.NavigationDisplay(System.Boolean)">
            <summary>
            Control that contains all the navigation display details.
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.CreateCurrentPage">
            <summary>
            Display the page n of n+1 text
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.CreateNumericalNavigation">
            <summary>
            Creates numerical navigation link buttons
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.CreatePrevNextNavigation">
            <summary>
            Creates previous/next navigation link buttons
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.PageIndex_Click(System.Object,System.EventArgs)">
            <summary>
            Event raised when a new index is selected from the paging control
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.PrevNext_Click(System.Object,System.EventArgs)">
            <summary>
            Event raised when a new index is selected from the paging control
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.OnPreRender(System.EventArgs)">
            <summary>
            Override OnPreRender and databind
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PagingNumbers.CalculateTotalPages(System.Int32,System.Int32)">
            <summary>
            Static that caculates the total pages available.
            </summary>
            
        </member>
        <member name="E:Rainbow.UI.WebControls.PagingNumbers.OnMove">
            <summary>
            Event raised when a an index has been selected by the end user
            </summary>
            
        </member>
        <member name="P:Rainbow.UI.WebControls.PagingNumbers.RecordsPerPage">
            <summary>
            Specifies the page size used in paging.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PagingNumbers.PageIndex">
            <summary>
            Specifies the current page in the index.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PagingNumbers.PageNumber">
            <summary>
            Specifies the current page number.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PagingNumbers.TotalPages">
            <summary>
            Specifies the Forum's posts you want to view.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PagingNumbers.RecordCount">
            <summary>
            RecordCount
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.TabItem">
            <summary>
            TabItem Class
            This class encapsulates the basic attributes of a Tab, and is used
            by the administration pages when manipulating tabs.<br/>
            TabItem implements 
            the IComparable interface so that an ArrayList of TabItems may be sorted
            by TabOrder, using the ArrayList's Sort() method.
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.TabItem.CompareTo(System.Object)">
            <summary>
            Public comparer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Configuration.TabItem.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.TabItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.TabItem.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.TabItem.NestLevel">
            <summary>
            NestLevel
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.PathDataType">
            <summary>
            PathDataType
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.ListDataType">
            <summary>
            ListDataType
            </summary>
        </member>
        <member name="M:Rainbow.UI.DataTypes.ListDataType.#ctor(System.IO.FileInfo[])">
            <summary>
            Returning dropdown list databound to FileInfo[] array
            </summary>
            <param name="fileList"></param>
        </member>
        <member name="T:Rainbow.Configuration.PortalItem">
            <summary>
            This class encapsulates the basic attributes of a Portal, and is used
            by the administration pages when manipulating Portals.  PortalItem implements 
            the IComparable interface so that an ArrayList of PortalItems may be sorted
            by PortalOrder, using the ArrayList's Sort() method.
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.PortalItem.CompareTo(System.Object)">
            <summary>
            Public comparer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalItem.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Configuration.PortalItem.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalItem.Path">
            <summary>
            Path
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalItem.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="M:Rainbow.Documentation.Viewer.OnInit(System.EventArgs)">
            <summary>
            Raises OnInitEvent
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Documentation.Viewer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Security.UsersDB">
            <summary>
            The UsersDB class encapsulates all data logic necessary to add/login/query
            users within the Portal Users database.
            
            <remarks>
            Important Note: The UsersDB class is only used when forms-based cookie
            authentication is enabled within the portal.  When windows based
            authentication is used instead, then either the Windows SAM or Active Directory
            is used to store and validate all username/password credentials.
            </remarks>
            </summary>
        </member>
        <member name="M:Rainbow.Security.UsersDB.AddRole(System.Int32,System.String)">
            <summary>
            AddRole() Method <a name="AddRole"></a>
            
            The AddRole method creates a new security role for the specified portal,
            and returns the new RoleID value.
            
            Other relevant sources:
                + <a href="AddRole.htm" style="color:green">AddRole Stored Procedure</a>
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="roleName" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.AddUser(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            AddUser
            </summary>
            <param name="portalID"></param>
            <param name="name"></param>
            <param name="company"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zip"></param>
            <param name="countryID"></param>
            <param name="stateID"></param>
            <param name="pIva"></param>
            <param name="cFiscale"></param>
            <param name="phone"></param>
            <param name="fax"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="sendNewsletter"></param>
            <returns>The newly created ID</returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.AddUser(System.String,System.String,System.String,System.Int32)">
            <summary>
            UsersDB.AddUser() Method <a name="AddUser"></a>
            
            The AddUser method inserts a new user record into the "Users" database table.
            
            Other relevant sources:
                + <a href="AddUser.htm" style="color:green">AddUser Stored Procedure</a>
            </summary>
            <param name="fullName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="email" type="string">
                <para>
                    
                </para>
            </param>
            <param name="password" type="string">
                <para>
                    
                </para>
            </param>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.AddUserRole(System.Int32,System.Int32)">
            <summary>
            AddUserRole() Method <a name="AddUserRole"></a>
            The AddUserRole method adds the user to the specified security role.
            Other relevant sources:
                + <a href="AddUserRole.htm" style="color:green">AddUserRole Stored Procedure</a>
            </summary>
            <param name="roleID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="userID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.DeleteRole(System.Int32)">
            <summary>
            DeleteRole() Method <a name="DeleteRole"></a>
            The DeleteRole deletes the specified role from the portal database.
            Other relevant sources:
                + <a href="DeleteRole.htm" style="color:green">DeleteRole Stored Procedure</a>
            </summary>
            <param name="roleID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.DeleteUser(System.Int32)">
            <summary>
            The DeleteUser method deleted a  user record from the "Users" database table.
            </summary>
            <param name="userID"></param>
        </member>
        <member name="M:Rainbow.Security.UsersDB.DeleteUserRole(System.Int32,System.Int32)">
            <summary>
            DeleteUserRole() Method <a name="DeleteUserRole"></a>
            The DeleteUserRole method deletes the user from the specified role.
            Other relevant sources:
                + <a href="DeleteUserRole.htm" style="color:green">DeleteUserRole Stored Procedure</a>
            </summary>
            <param name="roleID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="userID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetCurrentUser(System.String,System.Int32)">
            <summary>
            Get a full user for store on authentication cookie
            </summary>
            <param name="email"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetCurrentUserID(System.String,System.Int32)">
            <summary>
            Get Current UserID
            </summary>
            <param name="UserEmail"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetPortalRoles(System.Int32)">
            <summary>
            GetPortalRoles() Method <a name="GetPortalRoles"></a>
            
            The GetPortalRoles method returns a list of all role names for the 
            specified portal.
            
            Other relevant sources:
                + <a href="GetRolesByUser.htm" style="color:green">GetPortalRoles Stored Procedure</a>
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetRoleMembers(System.Int32)">
            <summary>
            GetRoleMembers() Method <a name="GetRoleMembers"></a>
            
            The GetRoleMembers method returns a list of all members in the specified
            security role.
            
            Other relevant sources:
                + <a href="GetRoleMembers.htm" style="color:green">GetRoleMembers Stored Procedure</a>
            </summary>
            <param name="roleID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetRoleNonMembers(System.Int32,System.Int32)">
            <summary>
            This Method Is Used To Retrieve All Users Who Do Not Belong To A Particular Role
            </summary>
            <param name="roleID"></param>
            <returns>A SqlDataReader</returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetRoleNonMembersFiltered(System.Int32,System.Int32,System.Int32)">
            <summary>
            This Method Is Used To Retrieve All Users Who Do Not Belong To A Particular Role But 
            Belong To A Second Role.
            </summary>
            <param name="roleID"></param>
            <param name="portalID"></param>
            <param name="filterRoleID"></param>
            <returns>A SqlDataReader</returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetRoles(System.String,System.Int32)">
            <summary>
            GetRoles() Method <a name="GetRoles"></a>
            
            The GetRoles method returns a list of role names for the user.
            
            Other relevant sources:
                + <a href="GetRolesByUser.htm" style="color:green">GetRolesByUser Stored Procedure</a>
            </summary>
            <param name="email" type="string">
                <para>
                    
                </para>
            </param>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A string[] value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetRolesByUser(System.String,System.Int32)">
            <summary>
            UsersDB.GetRolesByUser() Method <a name="GetRolesByUser"></a>
            
            The DeleteUser method deleted a  user record from the "Users" database table.
            
            Other relevant sources:
                + <a href="GetRolesByUser.htm" style="color:green">GetRolesByUser Stored Procedure</a>
            </summary>
            <param name="email" type="string">
                <para>
                    
                </para>
            </param>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetSingleUser(System.String,System.Int32,System.String)">
            <summary>
            GetSingleUser Method
            
            The GetSingleUser method returns a SqlDataReader containing details
            about a specific user from the Users database table.
            </summary>
            <param name="email"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetSingleUser(System.String,System.Int32)">
            <summary>
            GetSingleUser Method
            
            The GetSingleUser method returns a SqlDataReader containing details
            about a specific user from the Users database table.
            </summary>
            <param name="email"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetUncheckedUsers(System.Int32)">
            <summary>
            UsersDB.GetUncheckedUsers() Method <a name="GetUsers"></a>
            
            Get only the records with CheckMail disabled from the "Users" database table.
            To avoid troubles MailCheck cannot check more than 10 users at time
            
            Other relevant sources:
                + <a href="GetUncheckedUsers.htm" style="color:green">GetUncheckedUsers Stored Procedure</a>
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetUsers(System.Int32)">
            <summary>
             UsersDB.GetUsers() Method <a name="GetUsers"></a>
             Get record from the "Users" database table.
            </summary>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetUsersCount(System.Int32)">
            <summary>
            The GetUsersCount method returns the users count.
            Uses GetUsersCount Stored Procedure.
            </summary>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetUsersNoPassword(System.Int32)">
            <summary>
            UsersDB.GetUsersNoPassword() Method <a name="GetUsers"></a>
            
            Get only the records with SendNewsletter enabled from the "Users" database table.
            
            Other relevant sources:
                + <a href="GetUsersNoPassword.htm" style="color:green">GetUsersNoPassword Stored Procedure</a>
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetUsersNoRole(System.Int32)">
            <summary>
            This Method Is Used To Retrieve All Users Who Do Not Belong To A Role
            </summary>
            <returns>A SqlDataReader</returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.GetUsersReader(System.Int32)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.Login(System.Int32,System.String,System.Int32)">
            <summary>
            UsersDB.Login() Method.
            The Login method validates a id/password pair against credentials
            stored in the users database.  If the id/password pair is valid,
            the method returns user's name.
            </summary>
            <remarks>UserLogin Stored Procedure</remarks>
            <param name="uid"></param>
            <param name="password"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.Login(System.String,System.String,System.Int32)">
            <summary>
            UsersDB.Login() Method.
            The Login method validates a email/password pair against credentials
            stored in the users database.  If the email/password pair is valid,
            the method returns user's name.
            </summary>
            <remarks>UserLogin Stored Procedure</remarks>
            <param name="email"></param>
            <param name="password"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateLastVisit(System.String,System.Int32)">
            <summary>
            UpdateLastVisit Method
            
            The UpdateLastVisit method updates the specified user's last visit date in the Users database table.
            </summary>
            <param name="email"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateRole(System.Int32,System.String)">
            <summary>
            UpdateRole() Method <a name="UpdateRole"></a>
            
            The UpdateRole method updates the friendly name of the specified role.
            
            Other relevant sources:
                + <a href="UpdateRole.htm" style="color:green">UpdateRole Stored Procedure</a>
            </summary>
            <param name="roleID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="roleName" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUser(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            UpdateUser
            This overload allow to change identity of the user
            </summary>
            <param name="oldUserID"></param>
            <param name="userID"></param>
            <param name="portalID"></param>
            <param name="name"></param>
            <param name="company"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zip"></param>
            <param name="countryID"></param>
            <param name="stateID"></param>
            <param name="pIva"></param>
            <param name="cFiscale"></param>
            <param name="phone"></param>
            <param name="fax"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="sendNewsletter"></param>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUser(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            UpdateUser
            This overload allow to change identity of the user
            </summary>
            <param name="oldUserID"></param>
            <param name="userID"></param>
            <param name="portalID"></param>
            <param name="name"></param>
            <param name="password"></param>
            <param name="email"></param>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUser(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            method added by Thierry (tiptopweb) on 5 May 2003
            The UpdateUser method inserts a new user record into the "Users" database table.
            </summary>
            <param name="userID"></param>
            <param name="portalID"></param>
            <param name="name"></param>
            <param name="company"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zip"></param>
            <param name="countryID"></param>
            <param name="stateID"></param>
            <param name="pIva"></param>
            <param name="cFiscale"></param>
            <param name="phone"></param>
            <param name="fax"></param>
            <param name="email"></param>
            <param name="sendNewsletter"></param>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUser(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            UpdateUser
            Autogenerated by CodeWizard 04/04/2003 17.55.40
            </summary>
            <param name="userID"></param>
            <param name="portalID"></param>
            <param name="name"></param>
            <param name="company"></param>
            <param name="address"></param>
            <param name="city"></param>
            <param name="zip"></param>
            <param name="countryID"></param>
            <param name="stateID"></param>
            <param name="pIva"></param>
            <param name="cFiscale"></param>
            <param name="phone"></param>
            <param name="fax"></param>
            <param name="password"></param>
            <param name="email"></param>
            <param name="sendNewsletter"></param>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUser(System.Int32,System.String,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            The UpdateUser method updates a user record from the "Users" database table.
            </summary>
            <param name="userID"></param>
            <param name="name"></param>
            <param name="email"></param>
            <param name="password"></param>
            <param name="portalID"></param>
            <param name="SendNewsletter"></param>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUser(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32)">
            <summary>
            The UpdateUser method inserts a new user record into the "Users" database table.
            </summary>
            <param name="userID"></param>
            <param name="Name"></param>
            <param name="Company"></param>
            <param name="Address"></param>
            <param name="City"></param>
            <param name="Zip"></param>
            <param name="Phone"></param>
            <param name="Fax"></param>
            <param name="PIva"></param>
            <param name="CFiscale"></param>
            <param name="SendNewsletter"></param>
            <param name="IDCountry"></param>
            <param name="IDState"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUserCheckEmail(System.Int32,System.Int32)">
            <summary>
            The UpdateUserCheckEmail sets the user email as trusted and verified
            </summary>
            <param name="userID"></param>
            <param name="CheckedEmail"></param>
        </member>
        <member name="M:Rainbow.Security.UsersDB.UpdateUserSetPassword(System.Int32,System.String)">
            <summary>
            Change the user password with a new one
            </summary>
            <param name="userID"></param>
            <param name="Password"></param>
        </member>
        <member name="T:Rainbow.Security.UserWinMgmtDB">
            <summary>
            [START -- Added for User 's WIndow Mgmt -- bja@reedtek.com]
            
            UserWinMgmtDB Class
            
            The UserWinMgmtDB class encapsulates all data logic necessary to add/delete/query
            users window mgmt level ( min/max/close )
            </summary>
        </member>
        <member name="M:Rainbow.Security.UserWinMgmtDB.DeleteUserDeskTop(System.Int32,System.Int32)">
            <summary>
            DeleteUserDeskTop Method
            
            The DeleteUserDeskTop method deletes a specific user desktop from the serDesktop database table.
            </summary>
            <param name="userID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A bool value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.UserWinMgmtDB.GetUserDesktop(System.Int32,System.Int32)">
            <summary>
            GetUserDesktop() Method <a name="GetUserDesktop"></a>
            
            The GetUserDesktop method returns a list of the users' desktop envrionment
            
            Other relevant sources:
                + <a href="GetUserDesktop.htm" style="color:green">GetUserDesktop Stored Procedure</a>
            </summary>
            <param name="userID"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UserWinMgmtDB.SaveUserDesktop(System.Int32,System.Int32,System.Int32,System.Int32,Rainbow.BLL.Utils.WindowStateEnum)">
            <summary>
            Save the User's Window Desktop Settings
            </summary>
            <param name="portalID"></param>
            <param name="userID"></param>
            <param name="moduleID"></param>
            <param name="tabID"></param>
            <param name="wstate"></param>
        </member>
        <member name="M:Rainbow.Security.UserWinMgmtDB.addModuleSettings(System.Data.SqlClient.SqlDataReader)">
            <summary>
            Create the Module Settings 
            </summary>
            <param name="dr"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.UserWinMgmtDB.populateUserLayoutMgr(System.Data.SqlClient.SqlDataReader,Rainbow.BLL.User.UserLayoutMgr)">
            <summary>
            Populate a User Layout from the Data Reader
            </summary>
            <param name="dr"></param>
            <param name="ulm"></param>
        </member>
        <member name="T:Rainbow.Design.ThemeManager">
            <summary>
            The ThemeManager class encapsulates all data logic necessary to
            use differents themes across the entire portal.
            Manages the Load and Save of the Themes.
            Encapsulates a Theme object that contains all the settings
            of the current Theme.
            </summary>
        </member>
        <member name="F:Rainbow.Design.ThemeManager.CurrentTheme">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.#ctor(System.String)">
            <summary>
                
            </summary>
            <param name="portalPath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.ClearCacheList">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.GetPublicThemes">
            <summary>
            Read the Path dir and returns an ArrayList with all the Themes found.
            Static because the list is Always the same.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.GetThemes">
            <summary>
            Read the Path dir and returns
            an ArrayList with all the Themes found, public and privates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.Load(System.String)">
            <summary>
                
            </summary>
            <param name="ThemeName" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.OnRemove(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
                
            </summary>
            <param name="key" type="string">
                <para>
                    
                </para>
            </param>
            <param name="cacheItem" type="object">
                <para>
                    
                </para>
            </param>
            <param name="reason" type="System.Web.Caching.CacheItemRemovedReason">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.Save(System.String)">
            <summary>
                
            </summary>
            <param name="ThemeName" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.LoadTheme(System.String)">
            <summary>
                
            </summary>
            <param name="CurrentWebPath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A bool value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeManager.LoadXml(System.String)">
            <summary>
                
            </summary>
            <param name="filename" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A bool value...
            </returns>
        </member>
        <member name="P:Rainbow.Design.ThemeManager.Path">
            <summary>
            The path of the Theme dir (Phisical path)
            used ot load Themes
            </summary>
        </member>
        <member name="P:Rainbow.Design.ThemeManager.PortalThemePath">
            <summary>
            The path of the current portal Theme dir (Phisical path)
            used to load Themes
            </summary>
        </member>
        <member name="P:Rainbow.Design.ThemeManager.PortalWebPath">
            <summary>
            The path of the current portal Theme dir (Web side)
            used to reference images
            </summary>
        </member>
        <member name="P:Rainbow.Design.ThemeManager.WebPath">
            <summary>
            The path of the Theme dir (Web side)
            used to reference images
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.ErrorHandler">
            <summary>
            This class in combination with the Web.Config file handles all the Errors that are not caught programatically
            99% of the time Errors will be caught by Rainbow's HttpUrlModule, this class will be called, errors will be 
            logged depending on what was specified by the Web.Config file, after that the error cascades up and is caught
            by the customErrors settings in Web.Config. Here you can specify errors and which pages to redirect to.
            Visitors will be directed to dynamic aspx pages for General Errors and 404 Errors (Specified aspx page does not exist)
            These pages are dynamic and will keep the theme you selected for your portal. It also makes use of Rainbow's
            multi-language support. If these dynamic pages themselves have an error (e.g the Database has crashed 
            so it can't retrieve the theme or translations, then there is code in these pages to catch errors at the
            Page Level and redirect to a static html page (one for general errors and one for 404 errors). 
            These pages will have no theme at all, just text (So that they will work across multiple themes) and the 
            text will be in English (No Translation - Although multiple versions of the html pages could be created to
            handle this. Please specify if it is urgent.
            
            Thanks go to  Joan M for the Original Code.
            Modified and extended by John Mandia.
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.ErrorHandler.HandleException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.ErrorHandler.InnerHandleException(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Configuration.ErrorHandler.HandleException(System.Exception)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Configuration.ErrorHandler.HandleException(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Configuration.ErrorHandler.FormatExceptionDescription(System.Exception)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:Rainbow.UI.WebControls.TextEditor">
            <summary>
            TextEditor is a simple implementation for an html editor. 
            Currently implements text only.
            </summary>
        </member>
        <member name="T:Rainbow.UI.AddEditItemPage">
            <summary>
            AddEditItemPage inherits from Rainbow.UI.SecurePage <br/>
            Used for add/edit pages<br/>
            Can be inherited
            </summary>
        </member>
        <member name="M:Rainbow.UI.AddEditItemPage.OnInit(System.EventArgs)">
            <summary>
            Handles OnInit event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddEditItemPage.OnCancel(System.EventArgs)">
            <summary>
            Handles OnCancel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddEditItemPage.OnUpdate(System.EventArgs)">
            <summary>
            Handles OnUpdate event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddEditItemPage.OnDelete(System.EventArgs)">
            <summary>
            Handles OnDelete
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.AddEditItemPage.LoadSettings">
            <summary>
            Load settings
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.DesktopModuleTitle">
            <summary>
            New 'stub' class for backward compatibility. Modules that add the ModuleTitle in 
            their init event will be adding this. New PortalModuleControl class pulls needed 
            values from this class. New modules should not use this class at all, setting 
            title properties directly on PortalModuleContol instead. Jes1111.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.DesktopModuleTitle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.DesktopModuleTitle.OnInit(System.EventArgs)">
            <summary>
            Init Event 
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.CustomButtons">
            <summary>
            CustomButtons class allows modules to add their own buttons from Code.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.EditText">
            <summary>
            Text for Edit Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.EditUrl">
            <summary>
            Url for Edit Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.EditTarget">
            <summary>
            Target frame/page for Edit Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.AddText">
            <summary>
            Text for Add Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.AddUrl">
            <summary>
            Url for Add Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.AddTarget">
            <summary>
            Target frame/page for Add Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.PropertiesText">
            <summary>
            Text for Properties Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.PropertiesUrl">
            <summary>
            Url for Properties Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.PropertiesTarget">
            <summary>
            Target frame/page for Properties Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.SecurityText">
            <summary>
            Text for Security Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.SecurityUrl">
            <summary>
            Url for Security Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.SecurityTarget">
            <summary>
            Target frame/page for Security Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopModuleTitle.TabID">
            <summary>
            Stores current linked module ID if applicable
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.TabSettings">
            <summary>
            TabSettings Class encapsulates the detailed settings 
            for a specific Tab in the Portal
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.AuthorizedRoles">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.MobileTabName">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.Modules">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.ParentTabID">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.ShowMobile">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.TabID">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.TabLayout">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.TabOrder">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings._portalSettings">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.customSettings">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.m_tabName">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabSettings.portalPath">
            <remarks>
            thierry (tiptopweb)
            to have dropdown list for the themes and layout, we need the data path for the portal (for private theme and layout)
            we need the portalPath here for this use and it has to be set from the current portalSettings before getting the
            CustomSettings for a tab
            </remarks>
        </member>
        <member name="M:Rainbow.Configuration.TabSettings.GetTabCustomSettings(System.Int32)">
            <summary>
            The TabSettings.GetTabCustomSettings Method returns a hashtable of
            custom Tab specific settings from the database. This method is
            used by Portals to access misc Tab settings.
            </summary>
            <param name="tabID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.TabSettings.GetTabSettings(System.Int32)">
            <summary>
            Read Current Tab subtabs
            </summary>
            <param name="TabID"></param>
        </member>
        <member name="M:Rainbow.Configuration.TabSettings.GetTabSettingsTabsBox(System.Int32)">
            <summary>
            Read Current Tab subtabs
            </summary>
            <param name="TabID"></param>
            <returns>TabsBox</returns>
        </member>
        <member name="M:Rainbow.Configuration.TabSettings.UpdateTabSettings(System.Int32,System.String,System.String)">
            <summary>
            Update Tab Custom Settings
            </summary>
            <param name="tabID"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.Configuration.TabSettings.GetImageMenu">
            <summary>
                
            </summary>
            
            <returns>
                A System.Collections.Hashtable value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.TabSettings.GetTabBaseSettings">
            <summary>
            Changed by Thierry@tiptopweb.com.au
            tabSettings are different for custom page layout an theme, this cannot be static
            Added by john.mandia@whitelightsolutions.com
            Cache by Manu
            non static function, Thierry : this is necessary for page custom layout and themes
            </summary>
            
            <returns>
                A System.Collections.Hashtable value...
            </returns>
        </member>
        <member name="P:Rainbow.Configuration.TabSettings.CustomSettings">
            <summary>
            Tab Settings For Search Engines
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.TabSettings.PortalPath">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.TabSettings.portalSettings">
            <summary>
            Stores current portal settings 
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.TabSettings.TabName">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Helpers.SearchHelper">
            <summary>
            SearchHelper
            Original ideas from Jakob Hansen.
            Reflection and pluggable interface by Manu
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.SearchPortal(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="userID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="searchModule" type="string">
                <para>
                    
                </para>
            </param>
            <param name="searchString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="searchField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="sortField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="sortDirection" type="string">
                <para>
                    
                </para>
            </param>
            <param name="topicName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="addExtraSQL" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.AddToDropDownList(System.Int32,System.Web.UI.WebControls.DropDownList@)">
            <summary>
            Adds the modules that can be searched to the dropdown list. 
            First entry is always the "All"
            </summary>
            <param name="portalID">The PortalID</param>
            <param name="ddList">The DropDown List</param>
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.GetSearchableModules(System.Int32)">
            <summary>
            The GetSearchableModules function returns a list of all Searchable modules
            </summary>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.AddSharedSQL(System.Int32,System.Int32,System.Text.StringBuilder@,System.String)">
            <summary>
            Add most of the WHERE part to a search sql
            </summary>
            <param name="portalID">portalID</param>
            <param name="userID">userID</param>
            <param name="select">SQL string to add sql to</param>
            <param name="fieldName">Field to do IS NOT NULL test on</param>
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.CreateTestSQL(System.Collections.ArrayList,System.String,System.Boolean)">
            <summary>
            Creates search sql to the WHERE clause
            </summary>
            <param name="arrFields">Array of fieldnames to search e.g. ArrayList("fld1", "fld2")</param>
            <param name="strSearchwords">Whatever words the user entered to perform the search with e.g. "smukke jakob". Note: Must be seperated by spaces!</param>
            <param name="useAnd">Controls wether all or only one word in the searchstring strSearchwords should result in a hit.</param>
            <returns>(fld1 LIKE '%smukke%' OR fld2 LIKE '%smukke%') AND (fld1 LIKE '%jakob%' OR fld2 LIKE '%jakob%')</returns>
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.MarkPhrase(System.String@)">
            <summary> 
            A phrase is marked with '"' as a stating and ending charater.
            If a phrase is discovered the '"' is replaced with '='.
            </summary> 
            <param name="strWords">The staring of words that might contain a phrase</param> 
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.DeleteBeforeBody(System.String)">
            <summary> 
            DeleteBeforeBody
            </summary> 
            <param name="strHtml">strHtml</param> 
        </member>
        <member name="M:Rainbow.Helpers.SearchHelper.GetTopicList(System.Int32)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A string[] value...
            </returns>
        </member>
        <member name="T:Rainbow.DesktopModules.RejectModuleContent">
            <summary>
            Summary description for RejectModuleContent.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.RejectModuleContent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.SettingsTableEventArgs">
            <summary>
            Class that defines data for the event
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.SettingsTableEventArgs.#ctor(Rainbow.Configuration.SettingItem)">
            <summary>
                
            </summary>
            <param name="item" type="Rainbow.Configuration.SettingItem">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="P:Rainbow.Configuration.SettingsTableEventArgs.CurrentItem">
            <summary>
            CurrentItem
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.UpdateControlEventHandler">
            <summary>
            UpdateControlEventHandler delegate
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.SettingsTable">
            <summary>
            A table control used to manage custom settings list
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingsTable.ObjectID">
            <summary>
            Used to store reference to base object it, 
            can be ModuleID or Portal ID
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.SettingsTable.EditControls">
            <summary>
            Used to store controls of settings
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.SettingsTable.DataBind">
            <summary>
            DataBind
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.SettingsTable.UpdateControls">
            <summary>
            UpdateControls
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.SettingsTable.OnUpdateControl(Rainbow.Configuration.SettingsTableEventArgs)">
            <summary>
            The protected OnUpdateControl method raises the event by invoking 
            the delegates. The sender is always this, 
            the current instance of /the class.
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Rainbow.Configuration.SettingsTable.UpdateControl">
            <summary>
            The UpdateControl event is defined using the event keyword.
            The type of UpdateControl is UpdateControlEventHandler.
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingsTable.DataSource">
            <summary>
            DataSource
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.UrlDataType">
            <summary>
            UrlDataType
            </summary>
        </member>
        <member name="T:Rainbow.KickStarter.CommonClasses.SqlHelper">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.SqlHelper.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.SqlHelper.ExecuteDataSet(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
                
            </summary>
            <param name="connectionString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="sqlCommand" type="System.Data.SqlClient.SqlCommand">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.DataSet value...
            </returns>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.SqlHelper.ExecuteNonQuery(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
                
            </summary>
            <param name="connectionString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="sqlCommand" type="System.Data.SqlClient.SqlCommand">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
                
            </summary>
            <param name="sqlTransaction" type="System.Data.SqlClient.SqlTransaction">
                <para>
                    
                </para>
            </param>
            <param name="connectionString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="sqlCommand" type="System.Data.SqlClient.SqlCommand">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.SqlHelper.ExecuteReader(System.String,System.Data.SqlClient.SqlCommand)">
            <summary>
                
            </summary>
            <param name="connectionString" type="string">
                <para>
                    
                </para>
            </param>
            <param name="sqlCommand" type="System.Data.SqlClient.SqlCommand">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.DesktopPanes.InitializeDataSource">
            <summary>
            This method determines the tab index of the currently
            requested portal view, and then dynamically populate the left,
            center and right hand sections of the portal tab.
             </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.Selector">
            <summary>
            This user control will render the current list of languages.
            by José Viladiu
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.Selector.OnChangeLanguage(Esperantus.WebControls.LanguageSwitcherEventArgs)">
            <summary>
            Examines/combines all the variables involved and sets
            CurrentUICulture and CurrentCulture.
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Rainbow.UI.WebControls.IEditModule">
            <summary>
            Default interface for edit modules
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.IEditModule.StartEdit(System.String)">
            <summary>
            The module select the requested item and starts editing the module.
            </summary>
            <param name="itemID">The param is string to be more general. Usually it contains a number.</param>
        </member>
        <member name="M:Rainbow.UI.WebControls.IEditModule.Reset">
            <summary>
            Purpose: Method the List control after data has been updated by the Edit control.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.IEditModule.HandleError(System.Exception)">
            <summary>
            Purpose: Displays any error messages.
            </summary>
            <param name="e" type="Exception">The Exception to display.</param>
        </member>
        <member name="P:Rainbow.UI.WebControls.IEditModule.AllowAdd">
            <summary>
            Purpose: Property to Allow Control to add records.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.IEditModule.AllowUpdate">
            <summary>
            Purpose: Property to Allow Control to update records.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.IEditModule.AllowDelete">
            <summary>
            Purpose: Property to Allow Control to delete records.
            </summary>
        </member>
        <member name="E:Rainbow.UI.WebControls.IEditModule.DataActionStart">
            <summary>
            Purpose: Notify when Record has been Selected, Inserted, Updated or Deleted.
            </summary>
            <delegate>DataChangeStartedEventHandler</delegate>
        </member>
        <member name="E:Rainbow.UI.WebControls.IEditModule.DataActionEnd">
            <summary>
            Purpose: Notify when Record has been Selected, Inserted, Updated or Deleted.
            </summary>
            <delegate>DataChangeEndedEventHandler</delegate>
        </member>
        <member name="E:Rainbow.UI.WebControls.IEditModule.CancelEdit">
            <summary>
            Purpose: Notify when Editing has been canceled.
            </summary>
            <delegate>EventHandler</delegate>
        </member>
        <member name="T:Rainbow.Error.GeneralErrorPage">
            <summary>
            Default Error page
            </summary>
        </member>
        <member name="M:Rainbow.Error.GeneralErrorPage.OnInit(System.EventArgs)">
            <summary>
            Raises the Init event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Error.GeneralErrorPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Admin.ADGroupMember">
            <summary>
            	Summary description for ADGroupMember.
            	Updated 18.Jan.2005 Cory Isakson to fix Jira Bug RBP-382 Line 93
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.PortalModuleControl">
            <summary>
            The PortalModuleControl class defines a custom 
            base class inherited by all
            desktop portal modules within the Portal.<br/>
            The PortalModuleControl class defines portal 
            specific properties that are used by the portal framework
            to correctly display portal modules.
            </summary>
            <remarks>This is the "all new" RC4 PortalModuleControl, which no longer has a separate DesktopModuleTitle.</remarks>
        </member>
        <member name="T:Rainbow.Setup.IInstaller">
            <summary>
            IInstaller inteface is used by installable modules
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl.DeleteBtn">
            <summary>
            Standard content Delete button
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl.EditBtn">
            <summary>
            Standard content Edit button
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl.updateButton">
            <summary>
            Standard content Update button
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.#ctor">
            <summary>
            Dafault contructor, initializes default settings
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl._baseSettings">
            <summary>
            _baseSettings holds datatype information
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.OnFlushCache">
            <summary>
            Handles FlushCache event at Module level<br/>
            Performs FlushCache actions that are common to all Pages<br/>
            Can be overridden
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.OnUpdate(System.EventArgs)">
            <summary>
            Handles OnUpdate event at Page level<br/>
            Performs OnUpdate actions that are common to all Pages<br/>
            Can be overridden
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.OnDelete">
            <summary>
            On Delete
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.OnVersionSwap">
            <summary>
            On Version Swap
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.OnInit(System.EventArgs)">
            <summary>
            Raises OnInit event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.UpdateBtn_Click(System.Object,System.EventArgs)">
            <summary>
            Update Button click
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.OnEdit">
            <summary>
            On Edit
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.Publish">
            <summary>
            Publish staging to production
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.RevertToProductionContent(System.Object,System.EventArgs)">
            <summary>
            Event handler for Workflow "revert"
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.GetOtherVersionUrl">
            <summary>
            This function constructs the NavigateUrl for the SwapVersions hyperlink
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.GetPublishUrl">
            <summary>
            This function constructs the NavigateUrl for the Publish hyperlink
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.SearchSqlSelect(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Searchable module implementation
            </summary>
            <param name="portalID">The portal ID</param>
            <param name="userID">ID of the user is searching</param>
            <param name="searchString">The text to search</param>
            <param name="searchField">The fields where perfoming the search</param>
            <returns>The SELECT sql to perform a search on the current module</returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.GetLastModified">
            <summary>
            Returns the "Last Modified" string, or an empty string if option is not active.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.OrderModules(System.Collections.ArrayList)">
            <summary>
            function for module moving
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.GetModules(System.String)">
            <summary>
            The GetModules helper method is used to get the modules
            for a single pane within the tab
            </summary>
            <param name="pane"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.AppendModuleID(System.String,System.Int32)">
            <summary>
            function for module moving
            </summary>
            <param name="url"></param>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.RightLeft_Click(System.Object,System.EventArgs)">
            <summary>
            The RightLeft_Click server event handler on this page is
            used to move a portal module between layout panes on
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.UpDown_Click(System.Object,System.EventArgs)">
            <summary>
            The UpDown_Click server event handler on this page is
            used to move a portal module up or down on a tab's layout pane
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.setDeleteAttributes(System.Web.UI.WebControls.LinkButton@)">
            <summary>
            Set the close button attributes to prompt user before removing. 
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.DeleteModuleButton_Click(System.Object,System.EventArgs)">
            <summary>
            The DeleteModuleButton_Click server event handler on this page is
            used to delete a portal module
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.GetContent">
            <summary>
            Used by Content to fetch module content, by raising Init and Load events on the module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.BuildModuleContentContainer(System.Boolean)">
            <summary>
            Returns a module content sizing container tag with properties
            </summary>
            <paramref name="isBeginTag">Specifies whether to output the container's begin(true) or end(false) tag.</paramref>
            <returns>The literal control containing this tag</returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.ProcessModuleStrecthing(System.Web.UI.Control,System.Boolean)">
            <summary>
            Updates the moduleControl literal control with proper width settings to render the 'module width stretching' option
            </summary>
            <paramref name="moduleControl">The literal control element to parse and modify.</paramref>
            <paramref name="isBeginTag">Specifies whether the moduleElement parameter is for the element's begin(true) or end(false) tag.</paramref>
            <returns></returns>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl.ButtonList">
            <summary>
            used to hold the consolidated list of buttons for the module
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl.ButtonListUser">
            <summary>
            User Buttons
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl.ButtonListAdmin">
            <summary>
            Admin Buttons
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.PortalModuleControl.ButtonListCustom">
            <summary>
            Custom Buttons
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.BuildControlHierarchy">
            <summary>
            Makes the decisions about what needs to be built and calls the appropriate method
            </summary>
            
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.BuildNoTheme">
            <summary>
            Method builds "no theme" version of module. Now obeys ShowTitle and GetLastModified.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.Build">
            <summary>
            Builds the "with theme" versions of the module, with optional Title, Buttons and Body.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.ZenBuild">
            <summary>
            The Zen version of Build(). Parses XML Zen Module Layout.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.ZenEvaluate(System.String)">
            <summary>
            Supports ZenBuild(), evaluates 'if' commands
            </summary>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.SetupTheme">
            <summary>
            Sets the CurrentTheme - allowing custom Theme per module
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.MergeButtonLists">
            <summary>
            Merges the three public button lists into one.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.BuildButtonLists">
            <summary>
            Builds the three public button lists
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.SaveData(System.Data.DataSet)">
            <summary>
            Save module data
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.LoadData(System.Data.DataSet)">
            <summary>
            Load Data
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.Install(System.Collections.IDictionary)">
            <summary>
            Unknown
            </summary>
            <param name="stateSaver"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.Uninstall(System.Collections.IDictionary)">
            <summary>
            Unknown
            </summary>
            <param name="stateSaver"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.Commit(System.Collections.IDictionary)">
            <summary>
            Unknown
            </summary>
            <param name="stateSaver"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.PortalModuleControl.Rollback(System.Collections.IDictionary)">
            <summary>
            Unknown
            </summary>
            <param name="stateSaver"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.Settings">
            <summary>
            Module custom settings
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.BaseSettings">
            <summary>
            Module base settings defined by control creator
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.AddModuleControl">
            <summary>
            Override on derivates classes.
            Return the path of the add control if available.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.EditModuleControl">
            <summary>
            Override on derivates classes.
            Return the path of the edit control if available.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ModuleCacheKey">
            <summary>
            unique key for module caching
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ModuleID">
            <summary>
            The current ID of the module. Is unique for all portals.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.OriginalModuleID">
            <summary>
            The ID of the orginal module (will be different to ModuleID when using shortcut module)
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ModuleConfiguration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.GuidID">
            <summary>
            GUID of module (mandatory)
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ClassName">
            <summary>
            ClassName (Used for Get/Save: not implemented)
            </summary>
        </member>
        <member name="E:Rainbow.UI.WebControls.PortalModuleControl.Update">
            <summary>
            The Update event is defined using the event keyword.
            The type of Update is EventHandler.
            </summary>
        </member>
        <member name="E:Rainbow.UI.WebControls.PortalModuleControl.FlushCache">
            <summary>
            The FlushCache event is defined using the event keyword.
            The type of FlushCache is EventHandler.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.AdminModule">
            <summary>
            Override on derivates class.
            Return true if the module is an Admin Module.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.Searchable">
            <summary>
            Override on derivates classes.
            Return true if the module is Searchable.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.Cacheable">
            <summary>
            Override on derived class.
            Return true if the module is Cacheable.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SupportsPrint">
            <summary>
            Override on derived class.
            Return true if the module supports print in pop-up window.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SupportCollapsable">
            <summary>
            This property indicates if the specified module supports can be
            collpasable (minimized/maximized/closed)
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SupportsBack">
            <summary>
            This property indicates whether the module supports a Back button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SupportsEmail">
            <summary>
            This property indicates if the module supports email
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SupportsArrows">
            <summary>
            This property indicates if the specified module supports arrows to move modules
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SupportsWorkflow">
            <summary>
            This property indicates if the specified module workflow is enabled.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.InnerSupportsWorkflow">
            <summary>
            This property indicates if the specified module supports workflow.
            It returns the module property regardless of current module setting.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SupportsHelp">
            <summary>
            This property indicates if the specified module supports help
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.portalSettings">
            <summary>
            Stores current portal settings 
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PortalID">
            <summary>
            ID of portal in which module is instantiated
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.Page">
            <summary>
            Returns the current page
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.TabID">
            <summary>
            Stores current linked module ID if applicable
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.tabSettings">
            <summary>
            Stores current tab settings 
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.HasTitle">
            <summary>
            Return true if module has inner control of type title
            </summary>
            <remarks>Left here for backward compatibility until it proves redundant</remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ModuleTitle">
            <summary>
            Inner Title control. Now only used for backward compatibility 
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ShowTitle">
            <summary>
            Switch to turn on/off the display of Title text.
            </summary>
            <remarks>Note: won't turn off the display of Buttons like it used to! You can now have buttons displayed with no title text showing</remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ShowTitlePrint">
            <summary>
            Switch to turn on/off the display of the module title text (not the buttons) in the print pop-up.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.TitleText">
            <summary>
            The module title as it will be displayed on the page. Handles cultures automatically.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.EditText">
            <summary>
            Text for Edit Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.EditUrl">
            <summary>
            Url for Edit Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.EditTarget">
            <summary>
            Target frame/page for Edit Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.AddText">
            <summary>
            Text for Add Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.AddUrl">
            <summary>
            Url for Add Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.AddTarget">
            <summary>
            Target frame/page for Add Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PropertiesText">
            <summary>
            Text for Properties Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PropertiesUrl">
            <summary>
            Url for Properties Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PropertiesTarget">
            <summary>
            Target frame/page for Properties Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SecurityText">
            <summary>
            Text for Security Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SecurityUrl">
            <summary>
            Url for Security Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SecurityTarget">
            <summary>
            Target frame/page for Security Link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ButtonsRenderAs">
            <summary>
            Determines how ModuleButtons are rendered: as TextOnly, TextAndImage or ImageOnly. ImageOnly is the 'classic' Rainbow style.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PropertiesButton">
            <summary>
            Module Properties button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.SecurityButton">
            <summary>
            Module Security button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.DeleteModuleButton">
            <summary>
            "Delete this Module" button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.HelpButton">
            <summary>
            Module button that will launch the module help in a pop-up window
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.UpButton">
            <summary>
            Module Up button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.DownButton">
            <summary>
            Module Down button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.LeftButton">
            <summary>
            Module Left button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.RightButton">
            <summary>
            Module Right button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ReadyToApproveButton">
            <summary>
            Module ReadyToApprove button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.RevertButton">
            <summary>
            Module Revert button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ApproveButton">
            <summary>
            Module Approve button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.RejectButton">
            <summary>
            Module Reject button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PublishButton">
            <summary>
            Module Version button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.VersionButton">
            <summary>
            Module Version button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.EditButton">
            <summary>
            Module edit button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.AddButton">
            <summary>
            Module Add button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.BackButton">
            <summary>
            Module button that will return to previous tab
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PrintButton">
            <summary>
            Module button that will launch the module in a pop-up window suitable for printing
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.EmailButton">
            <summary>
            Module button that will launch a pop-up window to allow the module contents to be emailed
            </summary>
            <remarks>Not implemented yet.</remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.MinMaxButton">
            <summary>
            Module button to minimize/maximize module
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CloseButton">
            <summary>
            Module button to close module
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.IsViewable">
            <summary>
            View permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.IsAddable">
            <summary>
            Add permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.IsEditable">
            <summary>
            Edit permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.IsDeleteable">
            <summary>
            Delete permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ArePropertiesEditable">
            <summary>
            Edit properties permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanMinimized">
            <summary>
            Minimize permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanClose">
            <summary>
            Close permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanPrint">
            <summary>
            Print permission
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanDeleteModule">
            <summary>
            Permission for DeleteModuleButton
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanHelp">
            <summary>
            Permission for HelpButton
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanBack">
            <summary>
            Permission for BackButton
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanEmail">
            <summary>
            Permission for EmailButton
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanEdit">
            <summary>
            Permission for EditButton
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanAdd">
            <summary>
            Permission for AddButton
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanVersion">
            <summary>
            Permission for Version Button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanPublish">
            <summary>
            Permission for Publish Button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanApproveReject">
            <summary>
            Permission for Approve/Reject Buttons
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanRequestApproval">
            <summary>
            Permission for ReadyToApprove and Revert Buttons
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanArrows">
            <summary>
            Permission for Arrow Buttons (Up/Down/Left/Right)
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanSecurity">
            <summary>
            Permission for Security Button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.CanProperties">
            <summary>
            Permission for Properties Button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ShowBack">
            <summary>
            Can be set from module code to indicate whether module should display Back button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ProductionVersionText">
            <summary>
            Text for version Link for swapping to production version
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.StagingVersionText">
            <summary>
            Text for version Link for swapping to staging version
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.PublishText">
            <summary>
            Text for publish link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ReadyToApproveText">
            <summary>
            Text for request approval link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ApproveText">
            <summary>
            Text for approve link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.RejectText">
            <summary>
            Text for reject link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.WorkflowStatus">
            <summary>
            This property indicates the staging content state
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.Version">
            <summary>
            This property indicates which content will be shown to the user
            production content or staging content
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.Cultures">
            <summary>
            The module culture. If specified module should be showed
            only if current culture matches this setting.
            Colon separated list
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.Content">
            <summary>
            Will return module content as an object, if called.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.PortalModuleControl.ApplyTheme">
            <summary>
            Before apply theme DesktopModule designer checks this 
            property to be true.<br/>
            On inherited modules you can override this 
            property to not apply theme on specific controls.
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.PortalModuleControl.ThemeList">
            <summary>
            Localises Theme types: 'Default' and 'Alt'
            </summary>
        </member>
        <member name="M:Rainbow.Admin.ADGroupMember.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.SolpartNavigation">
            <summary>
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.INavigation">
            <summary>
            Default indterface for navigation controls
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.INavigation.AutoBind">
            <summary>
            Indicates if control should bind when loads
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.INavigation.Bind">
            <summary>
            Describes how this control should bind to db data
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.INavigation.ParentTabID">
            <summary>
            Describes how this control should bind to db data
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.SolpartNavigation.DataBind">
            <summary>
            Do databind.
            Thanks to abain for cleaning up the code and fixing the bugs
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.SolpartNavigation.GetInnerDataSource">
            <summary>
            Populates ArrayList of tabs based on binding option selected.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rainbow.UI.WebControls.SolpartNavigation.AutoShopDetect">
            <summary> 
            Indicates if control should detect products module when loads 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.SolpartNavigation.ShowIconMenu">
            <summary> 
            Indicates if control should render images in menu 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.SolpartNavigation.AutoBind">
            <summary> 
            Indicates if control should bind when loads 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.SolpartNavigation.Bind">
            <summary> 
            Describes how this control should bind to db data 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.SolpartNavigation.ParentTabID">
            <summary>
            defines the parentTabID when using BindOptionDefinedParent
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.MailHelper">
            <summary>
            This class contains functions for mailing to 
            rainbow users
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.GetEmailAddressesInRoles(System.String[],System.Int32)">
            <summary>
                
            </summary>
            <param name="Roles" type="string[]">
                <para>
                    
                </para>
            </param>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A string[] value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.GetCurrentUserEmailAddress">
            <summary>
            This function return's the email address of the current logged on user. 
            If its email-address is not valid or not found, 
            then an empty string is returned.
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.GetCurrentUserEmailAddress(System.Boolean)">
            <summary>
                
            </summary>
            <param name="Validated" type="bool">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.GetCurrentUserEmailAddress(System.String)">
            <summary>
                
            </summary>
            <param name="DefaultEmail" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.GetCurrentUserEmailAddress(System.String,System.Boolean)">
            <summary>
            This function return's the email address of the current logged on user. 
            If its email-address is not valid or not found, 
            then the Default address is returned
            </summary>
            <param name="DefaultEmail"></param>
            <param name="Validated"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.SendMailNoAttachment(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an email to specified address.
            </summary>
            <param name="From">Email address from</param>
            <param name="sendTo">Email address to</param>
            <param name="Subject">Email subject line</param>
            <param name="Body">Email body content</param>
            <param name="CC">Email carbon copy to</param>
            <param name="BCC">Email blind carbon copy to</param>
            <param name="SMTPServer">SMTP Server to send mail thru (optional, if not specified local machine is used)</param>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.SendMailOneAttachment(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an email to specified address.
            </summary>
            <param name="From">Email address from</param>
            <param name="sendTo">Email address to</param>
            <param name="Subject">Email subject line</param>
            <param name="Body">Email body content</param>
            <param name="CC">Email carbon copy to</param>
            <param name="BCC">Email blind carbon copy to</param>
            <param name="SMTPServer">SMTP Server to send mail thru (optional, if not specified local machine is used)</param>
            <param name="AttachmentFile">Optional attachment file name</param>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.SendMailMultipleAttachments(System.String,System.String,System.String,System.String,System.Collections.ArrayList,System.String,System.String,System.String)">
            <summary>
            Sends an email to specified address.
            </summary>
            <param name="From">Email address from</param>
            <param name="sendTo">Email address to</param>
            <param name="Subject">Email subject line</param>
            <param name="Body">Email body content</param>
            <param name="CC">Email carbon copy to</param>
            <param name="BCC">Email blind carbon copy to</param>
            <param name="SMTPServer">SMTP Server to send mail thru (optional, if not specified local machine is used)</param>
            <param name="AttachmentFiles">Optional, list of attachment file names in form of an array list</param>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.SendEMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an email to specified address.
            </summary>
            <param name="From">Email address from</param>
            <param name="sendTo">Email address to</param>
            <param name="Subject">Email subject line</param>
            <param name="Body">Email body content</param>
            <param name="CC">Email carbon copy to</param>
            <param name="BCC">Email blind carbon copy to</param>
            <param name="SMTPServer">SMTP Server to send mail thru (optional, if not specified local machine is used)</param>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.SendEMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sends an email to specified address.
            </summary>
            <param name="From">Email address from</param>
            <param name="sendTo">Email address to</param>
            <param name="Subject">Email subject line</param>
            <param name="Body">Email body content</param>
            <param name="CC">Email carbon copy to</param>
            <param name="BCC">Email blind carbon copy to</param>
            <param name="SMTPServer">SMTP Server to send mail thru (optional, if not specified local machine is used)</param>
            <param name="AttachmentFile">Optional attachment file name</param>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.SendEMail(System.String,System.String,System.String,System.String,System.Collections.ArrayList,System.String,System.String,System.String)">
            <summary>
            Sends an email to specified address.
            </summary>
            <param name="From">Email address from</param>
            <param name="sendTo">Email address to</param>
            <param name="Subject">Email subject line</param>
            <param name="Body">Email body content</param>
            <param name="CC">Email carbon copy to</param>
            <param name="BCC">Email blind carbon copy to</param>
            <param name="SMTPServer">SMTP Server to send mail thru (optional, if not specified local machine is used)</param>
            <param name="AttachmentFiles">Optional, list of attachment file names in form of an array list</param>
        </member>
        <member name="M:Rainbow.Helpers.MailHelper.SendEMail(System.String,System.String,System.String,System.String,System.Collections.ArrayList,System.String,System.String,System.String,System.Web.Mail.MailFormat)">
            <summary>
            Sends an email to specified address.
            </summary>
            <param name="From">Email address from</param>
            <param name="sendTo">Email address to</param>
            <param name="Subject">Email subject line</param>
            <param name="Body">Email body content</param>
            <param name="CC">Email carbon copy to</param>
            <param name="BCC">Email blind carbon copy to</param>
            <param name="SMTPServer">SMTP Server to send mail thru (optional, if not specified local machine is used)</param>
            <param name="AttachmentFiles">Optional, list of attachment file names in form of an array list</param>
            <param name="mf">Optional, mail format (text/html)</param>
        </member>
        <member name="T:Rainbow.UI.WebControls.FCKTextBox">
            <summary>
            FCKTextBox is a wrapper for FredCK.FCKeditor.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBox.Rainbow#UI#WebControls#IHtmlEditor#get_Height">
            <summary>
            FCKTextBox is a wrapper for FredCK.FCKeditor.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBox.Rainbow#UI#WebControls#IHtmlEditor#set_Height(System.Web.UI.WebControls.Unit)">
            <summary>
            FCKTextBox is a wrapper for FredCK.FCKeditor.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBox.Rainbow#UI#WebControls#IHtmlEditor#get_Width">
            <summary>
            FCKTextBox is a wrapper for FredCK.FCKeditor.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FCKTextBox.Rainbow#UI#WebControls#IHtmlEditor#set_Width(System.Web.UI.WebControls.Unit)">
            <summary>
            FCKTextBox is a wrapper for FredCK.FCKeditor.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.FCKTextBox.Text">
            <summary>
            Control Text
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.FCKTextBox.ImageFolder">
            <summary>
            Control Image Folder
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.FCK.filemanager.browse.imagegallery">
            <summary>
            Imagegallery.
            </summary>
        </member>
        <member name="T:Rainbow.UI.EditItemPage">
            <summary>
            EditItemPage inherits from Rainbow.UI.SecurePage <br/>
            Used for edit pages<br/>
            Can be inherited
            </summary>
        </member>
        <member name="M:Rainbow.UI.EditItemPage.OnInit(System.EventArgs)">
            <summary>
            Handles OnInit event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.EditItemPage.OnCancel(System.EventArgs)">
            <summary>
            Handles OnCancel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.EditItemPage.OnUpdate(System.EventArgs)">
            <summary>
            Handles OnUpdate event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.EditItemPage.OnDelete(System.EventArgs)">
            <summary>
            Handles OnDelete
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.EditItemPage.LoadSettings">
            <summary>
            Load settings
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.FCK.filemanager.browse.imagegallery.InitializeComponent">
            <summary>
            Método necesario para admitir el Diseñador. No se puede modificar
            el contenido del método con el editor de código.
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.LogHelper">
            <summary> 
            Log Helper for use with Provider implementation
            </summary> 
        </member>
        <member name="T:Rainbow.UI.DataTypes.DateDataType">
            <summary>
            DateDataType
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.LDAPHelper">
            <summary>
            Summary description for LDAPHelper.
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.LDAPHelper.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.LDAPHelper.GetMemberList(System.Boolean,System.String,System.Web.Caching.Cache)">
            <summary>
                
            </summary>
            <param name="Refresh" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="Groups" type="string">
                <para>
                    
                </para>
            </param>
            <param name="AppCache" type="System.Web.Caching.Cache">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.DataTable value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.LDAPHelper.GetContext(System.String)">
            <summary>
                
            </summary>
            <param name="path" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.LDAPHelper.SignOn(System.String,System.String,System.Boolean,System.String)">
            <summary>
                
            </summary>
            <param name="dn" type="string">
                <para>
                    
                </para>
            </param>
            <param name="password" type="string">
                <para>
                    
                </para>
            </param>
            <param name="persistent" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="redirectPage" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.LDAPHelper.Login(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="dn" type="string">
                <para>
                    
                </para>
            </param>
            <param name="password" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A Rainbow.Security.User value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.LDAPHelper.GetUserProfile(System.String)">
            <summary>
                
            </summary>
            <param name="dn" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Collections.Hashtable value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.LDAPHelper.GetRoles(System.String)">
            <summary>
                
            </summary>
            <param name="dn" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string[] value...
            </returns>
        </member>
        <member name="T:Rainbow.Helpers.LDAPHelper.AccountType">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.LDAPHelper.AccountType.none">
            <summary>
                None
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.LDAPHelper.AccountType.user">
            <summary>
                User
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.LDAPHelper.AccountType.group">
            <summary>
                Group
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.ModuleListDataType">
            <summary>
            ModuleListDataType
            </summary>
        </member>
        <member name="M:Rainbow.UI.DataTypes.ModuleListDataType.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="ModuleType">The Module name</param>
        </member>
        <member name="T:Rainbow.DesktopModules.WorkFlowDB">
            <summary>
            Class that encapsulates all data logic necessary 
            to publish a module using workflow
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.WorkFlowDB.Publish(System.Int32)">
            <summary>
            This function publishes the staging data of a module.
            </summary>
            <param name="moduleID"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.WorkFlowDB.Revert(System.Int32)">
            <summary>
            This function reverts the staging data to the content in production of a module.
            </summary>
            <param name="moduleID"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.WorkFlowDB.RequestApproval(System.Int32)">
            <summary>
            This function puts the status of a module to request approval
            </summary>
            <param name="moduleID"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.WorkFlowDB.Approve(System.Int32)">
            <summary>
            This function puts the status of a module to approved
            </summary>
            <param name="moduleID"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.WorkFlowDB.Reject(System.Int32)">
            <summary>
            This function puts the status of a module back to working
            </summary>
            <param name="moduleID"></param>
        </member>
        <member name="T:Rainbow.UI.DataTypes.SettingOption">
            <summary>
            Structure used for list settings
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ViewControlData">
            <summary>
            This class contains the data 
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.#ctor">
            <summary>
            ctor to create the image button
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.#ctor(System.String,System.String)">
            <summary>
             ctor to create the image button
            </summary>
            <param name="name"></param>
            <param name="localize"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.#ctor(System.String,System.String,System.String)">
            <summary>
            Main ctor to create the image button
            </summary>
            <param name="name"></param>
            <param name="altText"></param>
            <param name="localize"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.enableViewState(System.Boolean)">
            <summary>
             enable the view state of the button
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.visible(System.Boolean)">
            <summary>
             enable the visibility  of the button
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.ImageFormat(System.String)">
            <summary>
            Get the html format of the image
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.Url(System.String,System.Int32@,System.Int32@)">
            <summary>
            Determine the Url of the named string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlData.setup">
            <summary>
            setup the button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ViewControlData.viewControlBtn">
            <summary>
            Attribute for the Image Button
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ViewControlData.name">
            <summary>
            Attribute for the Image Button Name
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ViewControlData.alternateText">
            <summary>
            Attribute for the Image Button Alternate Text
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ViewControlData.localized">
            <summary>
            Attribute for the Image Button Localized Text
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ViewControlManager">
            ----------------------------------------------------------------------
            <summary>
            This manages the collection of view control button data
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlManager.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Default Ctor
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlManager.create(System.String,System.String)">
            <summary>
             Create the Image Button
            </summary>
            <param name="name">button name</param>
            <param name="local">index</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlManager.create(System.String,System.String,System.String)">
            <summary>
            Create the Image Button
            </summary>
            <param name="name"></param>
            <param name="altText"></param>
            <param name="localize"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlManager.findControl(System.String)">
            <summary>
            Find the control data
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.ViewControlManager.Button_Click(System.Object,System.EventArgs)">
            <summary>
            This method gets called when user min/max the button
            </summary>
            <param name="sender"></param>
            <param name="evt"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.ViewControlManager.Item(System.String)">
            <summary>
            Returns a the  button, if present
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ViewControlManager.ModuleID">
            <summary>
            Return the module ID
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ViewControlManager.TabID">
            <summary>
            Return the Tab id
            </summary>
        </member>
        <member name="T:Rainbow.Error.ErrorPage403">
            <summary>
            Default 403 error page
            </summary>
        </member>
        <member name="M:Rainbow.Error.ErrorPage403.OnInit(System.EventArgs)">
            <summary>
            Raises the Init event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Error.ErrorPage403.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Security.PortalSecurity">
            <summary>
            The PortalSecurity class encapsulates two helper methods that enable
            developers to easily check the role status of the current browser client.
            </summary>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.IsInRole(System.String)">
            <summary>
            PortalSecurity.IsInRole() Method
            
            The IsInRole method enables developers to easily check the role
            status of the current browser client.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.IsInRoles(System.String)">
            <summary>
            The IsInRoles method enables developers to easily check the role
            status of the current browser client against an array of roles
            </summary>
            <param name="roles"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.HasEditPermissions(System.Int32)">
            <summary>
            The HasEditPermissions method enables developers to easily check 
            whether the current browser client has access to edit the settings
            of a specified portal module.
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.HasViewPermissions(System.Int32)">
            <summary>
            The HasViewPermissions method enables developers to easily check 
            whether the current browser client has access to view the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.HasAddPermissions(System.Int32)">
            <summary>
            The HasAddPermissions method enables developers to easily check 
            whether the current browser client has access to Add the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.HasDeletePermissions(System.Int32)">
            <summary>
            The HasDeletePermissions method enables developers to easily check 
            whether the current browser client has access to Delete the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.HasPropertiesPermissions(System.Int32)">
            <summary>
            The HasPropertiesPermissions method enables developers to easily check 
            whether the current browser client has access to Properties the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.HasApprovePermissions(System.Int32)">
            <summary>
            The HasApprovePermissions method enables developers to easily check 
            whether the current browser client has access to Approve the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.HasPublishPermissions(System.Int32)">
            <summary>
            The HasPublishPermissions method enables developers to easily check 
            whether the current browser client has access to Approve the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetEditPermissions(System.Int32)">
            <summary>
            The GetEditPermissions method enables developers to easily retrieve 
            a list of roles that have Edit Permissions 
            of a specified portal module.
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that have Edit permissions seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetViewPermissions(System.Int32)">
            <summary>
            The GetViewPermissions method enables developers to easily retrieve 
            a list of roles that have View permissions for the  
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that have View permissions for the specified module seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetAddPermissions(System.Int32)">
            <summary>
            The GetAddPermissions method enables developers to easily retrieve 
            a list of roles that have Add permissions for the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that have Add permissions for the specified module seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetDeletePermissions(System.Int32)">
            <summary>
            The GetDeletePermissions method enables developers to easily retrieve 
            a list of roles that have access to Delete the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that have delete permissions for the specified module seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetPropertiesPermissions(System.Int32)">
            <summary>
            The GetPropertiesPermissions method enables developers to easily retrieve 
            a list of roles that have access to Properties for the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that have Properties permission for the specified module seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetMoveModulePermissions(System.Int32)">
            <summary>
            The GetMoveModulePermissions method enables developers to easily retrieve 
            a list of roles that have access to move specified portal moduleModule. 
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that have move module permission for the specified module seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetDeleteModulePermissions(System.Int32)">
            <summary>
            The GetDeleteModulePermissions method enables developers to easily retrieve 
            a list of roles that have access to delete specified portal moduleModule. 
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that have delete module permission for the specified module seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetApprovePermissions(System.Int32)">
            <summary>
            The GetApprovePermissions method enables developers to easily retrieve 
            a list of roles that have Approve permissions for the 
            specified portal module
            </summary>
            <param name="moduleID"></param>
            <returns>A string of roles that have approve permissions seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetPublishPermissions(System.Int32)">
            <summary>
            The GetPublishPermissions method enables developers to easily retrieve 
            the list of roles that have Publish Permissions. 
            </summary>
            <param name="moduleID"></param>
            <returns>A list of roles that has Publish Permissions seperated by ;</returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.SignOn(System.String,System.String)">
            <summary>
            Single point for logging on an user, not persistent.
            </summary>
            <param name="user">Username or email</param>
            <param name="password">Password</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.SignOn(System.String,System.String,System.Boolean)">
            <summary>
            Single point for logging on an user.
            </summary>
            <param name="user">Username or email</param>
            <param name="password">Password</param>
            <param name="persistent">Use a cookie to make it persistent</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.SignOn(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Single point for logging on an user.
            </summary>
            <param name="user">Username or email</param>
            <param name="password">Password</param>
            <param name="persistent">Use a cookie to make it persistent</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.SignOut">
            <summary>
            Single point logoff
            </summary>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.SignOut(System.String,System.Boolean)">
            <summary>
            Single point logoff
            </summary>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.PortalHome">
            <summary>
            Redirect user back to the Portal Home Page.
            Mainily used after a succesfull login.
            </summary>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.AccessDenied">
            <summary>
            Single point access deny.
            Called when there is an unauthorized access attempt.
            </summary>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.AccessDeniedEdit">
            <summary>
            Single point edit access deny.
            Called when there is an unauthorized access attempt to an edit page.
            </summary>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.SecureAccessDenied">
            <summary>
            Single point edit access deny from the Secure server (SSL)
            Called when there is an unauthorized access attempt to an edit page.
            </summary>
        </member>
        <member name="M:Rainbow.Security.PortalSecurity.GetRoles">
            <summary>
            Single point get roles
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.ApproveModuleContent">
            <summary>
            Summary description for ApproveModuleContent.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.ApproveModuleContent.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.ModulesDB">
            <summary>
            Class that encapsulates all data logic necessary to add/query/delete
            configuration, layout and security settings values within the Portal database.
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.AddGeneralModuleDefinitions(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            AddGeneralModuleDefinitions
            </summary>
            <param name="GeneralModDefID">GeneralModDefID</param>
            <param name="Admin"></param>
            <param name="AssemblyName"></param>
            <param name="ClassName"></param>
            <param name="DesktopSrc"></param>
            <param name="FriendlyName"></param>
            <param name="MobileSrc"></param>
            <param name="Searchable"></param>
            <returns>The newly created ID</returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.AddModule(System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            The AddModule method updates a specified Module within the Modules database table.
            If the module does not yet exist,the stored procedure adds it.<br />
            AddModule Stored Procedure
            </summary>
            <param name="tabID"></param>
            <param name="moduleOrder"></param>
            <param name="paneName"></param>
            <param name="title"></param>
            <param name="moduleDefID"></param>
            <param name="cacheTime"></param>
            <param name="editRoles"></param>
            <param name="viewRoles"></param>
            <param name="addRoles"></param>
            <param name="deleteRoles"></param>
            <param name="PropertiesRoles"></param>
            <param name="moveModuleRoles"></param>
            <param name="deleteModuleRoles"></param>
            <param name="showMobile"></param>
            <param name="publishingRoles"></param>
            <param name="supportWorkflow"></param>
            <param name="showEveryWhere"></param>
            <param name="supportCollapsable"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.DeleteModule(System.Int32)">
            <summary>
            The DeleteModule method deletes a specified Module from the Modules database table.<br />
            DeleteModule Stored Procedure
            </summary>
            <param name="moduleID"></param>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.DeleteModuleDefinition(System.Guid)">
            <summary>
            The DeleteModuleDefinition method deletes the specified 
            module type definition from the portal.
            </summary>
            <remarks>Other relevant sources: DeleteModuleDefinition Stored Procedure</remarks>
            <param name="defID"></param>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.ExistModuleProductsInTab(System.Int32,System.Int32)">
            <summary>
                
            </summary>
            <param name="tabID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A bool value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.FindModuleItemsByGuid(System.Int32,System.Guid)">
            <summary>
            Find module id defined by the guid in a tab in the portal
            </summary>
            <param name="portalID"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.FindModulesByGuid(System.Int32,System.Guid)">
            <summary>
            Find modules defined by the guid in a tab in the portal
            </summary>
            <param name="portalID"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetCurrentModuleDefinitions(System.Int32)">
            <summary>
            The GetModuleDefinitions method returns a list of all module type definitions.
            </summary>
            <remarks>Other relevant sources: GetModuleDefinitions Stored Procedure</remarks>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetGeneralModuleDefinitionByName(System.String)">
            <summary>
            The GetGeneralModuleDefinitionByName method returns the id of the Module
            that matches the named Module in general list.
            </summary>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModuleDefinitionByGuid(System.Int32,System.Guid)">
            <summary>
            The GetModuleDefinitionByGUID method returns the id of the Module
            that matches the named Module for the specified Portal.
            </summary>
            <param name="portalID"></param>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModuleDefinitionByName(System.Int32,System.String)">
            <summary>
            The GetModuleDefinitionByName method returns the id of the Module
            that matches the named Module for the specified Portal.
            </summary>
            <param name="portalID"></param>
            <param name="moduleName"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModuleDefinitions">
            <summary>
            The GetModuleDefinitions method returns a list of all module type 
            definitions for the portal.<br />
            GetModuleDefinitions Stored Procedure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModuleGuid(System.Int32)">
            <summary>
                
            </summary>
            <param name="moduleID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Guid value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModuleInUse(System.Guid)">
            <summary>
            The GetModuleInUse method returns a list of modules in use with this portal<br />
            GetModuleInUse Stored Procedure
            </summary>
            <param name="defID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModulesAllPortals">
            <summary>
            GetModulesAllPortals
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModulesByName(System.String,System.Int32)">
            <summary>
            The GetModuleByName method returns a list of all module with
            the specified Name (Type) within the Portal. 
            It is used to get all instances of a specified module used in a Portal.
             e.g. All Image Gallery
            </summary>
            <remarks>Other relevant sources: GetModuleByName Stored Procedure</remarks>
            <param name="moduleName"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModulesInTab(System.Int32,System.Int32)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="tabID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetModulesSinglePortal(System.Int32)">
            <summary>
            GetModulesSinglePortal
            </summary>
            <param name="PortalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetSingleModuleDefinition(System.Guid)">
            <summary>
            The GetSingleModuleDefinition method returns a SqlDataReader 
            containing details about a specific module definition 
            from the ModuleDefinitions table.
            </summary>
            <remarks>Other relevant sources: GetSingleModuleDefinition Stored Procedure</remarks>
            <param name="GeneralModDefID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetSolutionModuleDefinitions(System.Int32)">
            <summary>
            The GetSolutionModuleDefinitions method returns a list of all module type definitions.<br></br>
            GetSolutionModuleDefinitions Stored Procedure
            </summary>
            <param name="solutionID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.GetSolutions">
            <summary>
            The GetSolutions method returns the Solution list.
            </summary>
            <remarks>Other relevant sources: GetUsers Stored Procedure</remarks>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.UpdateGeneralModuleDefinitions(System.Guid,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            UpdateGeneralModuleDefinitions
            </summary>
            <param name="GeneralModDefID">GeneralModDefID</param>
            <param name="Admin"></param>
            <param name="AssemblyName"></param>
            <param name="ClassName"></param>
            <param name="DesktopSrc"></param>
            <param name="FriendlyName"></param>
            <param name="MobileSrc"></param>
            <param name="Searchable"></param>
            <returns>Void</returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.UpdateModule(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.String,System.Boolean,System.Boolean)">
            <summary>
            The UpdateModule method updates a specified Module within the Modules database table.
            If the module does not yet exist, the stored procedure adds it.<br />
            UpdateModule Stored Procedure
            </summary>
            <param name="moduleID"></param>
            <param name="moduleOrder"></param>
            <param name="paneName"></param>
            <param name="title"></param>
            <param name="cacheTime"></param>
            <param name="editRoles"></param>
            <param name="viewRoles"></param>
            <param name="addRoles"></param>
            <param name="deleteRoles"></param>
            <param name="PropertiesRoles"></param>
            <param name="moveModuleRoles"></param>
            <param name="deleteModuleRoles"></param>
            <param name="showMobile"></param>
            <param name="publishingRoles"></param>
            <param name="supportWorkflow"></param>
            <param name="showEveryWhere"></param>
            <param name="supportCollapsable"></param>
            <param name="ApprovalRoles"></param>
            <param name="tabID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.UpdateModuleDefinitions(System.Guid,System.Int32,System.Boolean)">
            <summary>
            The UpdateModuleDefinitions method updates 
            all module definitions in every portal
            </summary>
            <param name="GeneralModDefID"></param>
            <param name="portalID"></param>
            <param name="ischecked"></param>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.UpdateModuleOrder(System.Int32,System.Int32,System.String)">
            <summary>
            The UpdateModuleOrder method update Modules Order.<br />
            UpdateModuleOrder Stored Procedure
            </summary>
            <param name="ModuleID"></param>
            <param name="ModuleOrder"></param>
            <param name="pane"></param>
        </member>
        <member name="M:Rainbow.Configuration.ModulesDB.UpdateModuleSetting(System.Int32,System.String,System.String)">
            <summary>
            The UpdateModuleSetting Method updates a single module setting 
            in the ModuleSettings database table.
            </summary>
            <param name="moduleID"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Rainbow.Services.ServiceType">
            <summary>
            Lists the possible types of services that can be used
            with a community.
            </summary>
        </member>
        <member name="T:Rainbow.Services.ServiceListType">
            <summary>
            Lists the possible types of services
            </summary>
        </member>
        <member name="T:Rainbow.Services.ServiceRequestInfo">
            <summary>
            This class Represents all the information about what the requested
            service (described in the URL attribute) should return.
            </summary>
        </member>
        <member name="M:Rainbow.Services.ServiceRequestInfo.#ctor">
            <summary>
            Initializes a new instance of the ServiceInfo object.
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.Type">
            <summary>
            Represents the type of the service such as community Web 
            service or RSS.
            Default value: ServiceType.Unknown
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.Url">
            <summary>
            Represents the URL of the service (aka. data source)
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.PortalAlias">
            <summary>
            Represents the Alias of the site
            See database: [rb_Portal].[PortalAlias]
            Default value: string.Empty (the value of web.config key DefaultPortal will be used!)
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.LocalMode">
            <summary>
            When true the Url is ignored and the local Rainbow site is used as data soure
            Default value: false
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.UserName">
            <summary>
            Used together with UserPassword to sign-in and retrieve data with this
            users credentials/rights
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.UserPassword">
            <summary>
            Used together with UserName to sign-in and retrieve data with this
            users credentials/rights
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.ListType">
            <summary>
            The type of the required list. See enum ServiceListType
            Default value: ServiceListType.Tab
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.ModuleType">
            <summary>
            Module type
            See database: [rb_GeneralModuleDefinitions].[ClassName]
            Valid values: All;Announcements;Contacts;Discussion;Events;HtmlModule;Documents;Pictures;Articles;Tasks;FAQs;ComponentModule
            Default value: "All".
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.MaxHits">
            <summary>
            Represents the number of items returned by the service. 
            Default value: 20
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.ShowID">
            <summary>
            If true ID's are displyed in the lists
            Default value: false
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.SearchString">
            <summary>
            Search string. Note: different behaviour depending on the ListType
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.SearchField">
            <summary>
            Set this if only a single field should be searched e.g.: "Title"
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.SortField">
            <summary>
            Sort list on this field
            Valid values: ModuleName;Title;CreatedByUser;CreatedDate;TabName
            Default value: ModuleName
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.SortDirection">
            <summary>
            Sort Ascending or Descending
            Valid values: ASC;DESC
            Default value: ASC
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.RootLevelOnly">
            <summary>
            If true only tabs or modules where tab parent is at top level are listed
            Default value: false
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.MobileOnly">
            <summary>
            If true only data for mobile devices are listed
            Default value: false
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.IDList">
            <summary>
            Comma separated list of ID's. e.g.: 1234,234,5454. 
            Only data for these ID's are listed. The ID type is controlled using 
            attribute IDListType
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.IDListType">
            <summary>
            Controls the type of ID's in attribute IDList
            Default value: ServiceListType.Tab
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceRequestInfo.Tag">
            <summary>
            The service that receives this tag does a check and see if it can
            do the special thingy that the tag value controls. 
            If the tag value is not supported "Tag=X not supported" is returned 
            in field ServiceResponseInfo.ServiceStatus. The service should try
            to deliver data for "normal case" (Tag=0).
            </summary>
        </member>
        <member name="T:Rainbow.Services.ServiceResponseInfo">
            <summary>
            This class Represents the response from a service including
            the response from a community Web service and a RSS service.
            </summary>
        </member>
        <member name="M:Rainbow.Services.ServiceResponseInfo.#ctor">
            <summary>
            Initializes a new instance of the ServiceResponseInfo class.
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceStatus">
            <summary>
            Contains a response code from the service. If everything
            works, the response is "OK".
            Default value: the string "Unknown"
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceTitle">
            <summary>
            Represents the title of the service.
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceLink">
            <summary>
            Represents the URL of the service.
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceDescription">
            <summary>
            Represents the description of the service.
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceCopyright">
            <summary>
            Represents copyright information associated with the service.
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceImageTitle">
            <summary>
            Represents the text associated with the service image.
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceImageUrl">
            <summary>
            Represents the URL of an image associated with the service.
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.ServiceImageLink">
            <summary>
            Represents a URL associated with a service image.
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfo.Items">
            <summary>
            Represents the content items returned by the service.
            </summary>
        </member>
        <member name="T:Rainbow.Services.ServiceResponseInfoItem">
            <summary>
            This class represents a particular content item returned by a service.
            </summary>
        </member>
        <member name="M:Rainbow.Services.ServiceResponseInfoItem.#ctor">
            <summary>
            Initializes a new instance of the ServiceResponseInfoItem Class
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.Link">
            <summary>
            URL link that later is applyed to the attribute Title
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.Title">
            <summary>
            Title of the item/module/tab
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.Description">
            <summary>
            Title of the item/module/tab (aka Abstract)
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.FriendlyName">
            <summary>
            Name of module in english
            See database: [rb_GeneralModuleDefinitions].[FriendlyName]
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.ModuleID">
            <summary>
            The module ID of the item
            Default value: -1
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.ItemID">
            <summary>
            Item ID
            Default value: -1
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.CreatedByUser">
            <summary>
            Name (email) of the user that created the item
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.CreatedDate">
            <summary>
            Creation date of the item
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.TabID">
            <summary>
            The Tab ID of the items module
            Default value: -1
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.TabName">
            <summary>
            Name of tab where the item is displayed
            See database: [rb_Tabs].[TabName]
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.GeneralModDefID">
            <summary>
            GUID ID of module. 
            See database: [rb_GeneralModuleDefinitions].[GeneralModDefID]
            Default value: string.Empty
            </summary>
        </member>
        <member name="P:Rainbow.Services.ServiceResponseInfoItem.ModuleTitle">
            <summary>
            Name of module where the item is placed
            See database: [rb_Modules].[ModuleTitle]
            Default value: string.Empty
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.FlashMovie">
            <summary>
            Flash Movie Control.
            </summary>
        </member>
        <member name="T:Rainbow.UI.PropertyPage">
            <summary>
            PropertyPage inherits from Rainbow.UI.SecurePage <br/>
            Used for properties pages<br/>
            Can be inherited
            </summary>
        </member>
        <member name="M:Rainbow.UI.PropertyPage.OnInit(System.EventArgs)">
            <summary>
            Handles OnInit event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.PropertyPage.OnCancel(System.EventArgs)">
            <summary>
            Handles OnCancel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.PropertyPage.OnUpdate(System.EventArgs)">
            <summary>
            Handles OnUpdate event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.PropertyPage.OnDelete(System.EventArgs)">
            <summary>
            Handles OnDelete
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.PropertyPage.LoadSettings">
            <summary>
            Load settings
            </summary>
        </member>
        <member name="P:Rainbow.UI.PropertyPage.AllowedModules">
            <summary>
            Only can use this from the original module
            </summary>
        </member>
        <member name="T:Rainbow.BLL.UserConfig.UserModuleSettings">
            <summary>
            *********************************************************************
            
            UserModuleSettings Class
            
            Class that encapsulates the detailed settings for a specific Module 
            in the Portal for the user
            
            *********************************************************************
            </summary>
        </member>
        <member name="F:Rainbow.BLL.UserConfig.UserModuleSettings.ModuleID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rainbow.BLL.UserConfig.UserModuleSettings.TabID">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rainbow.BLL.UserConfig.UserModuleSettings.State">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserModuleSettings.#ctor(System.Int32,Rainbow.BLL.Utils.WindowStateEnum,System.Int32)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserModuleSettings.#ctor(System.Int32)">
            <summary>
            ctor
            </summary>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserModuleSettings.#ctor">
            <summary>
            ctor
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.GlobalInternalStrings">
            <summary>
            Summary description for GlobalInternalStrings.
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.AllUsers">
            <summary>
            The role of all  users
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.Admins">
            <summary>
            The name of the admin role
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.RoleDelimiter">
            <summary>
            The Persistent/DB delimter
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.Anonymous">
            <summary>
            Anonymous user name
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.PortalPrefix">
            <summary>
            the portal prefix
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.UserWinMgmtIndex">
            <summary>
            the cookie id used for getting the uid ( dependency above !)
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.CookiePath">
            <summary>
            the cookie path used for window informaton ( dependency above !)
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.CVS">
            <summary>
            the CVS directory
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.LeftPane">
            <summary>
            left pane
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.RightPane">
            <summary>
            right pane
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.ContentPane">
            <summary>
            context pane
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.HeaderPane">
            <summary>
            header pane [FUTURE?]
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.FooterPane">
            <summary>
            footer pane [FUTURE?]
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.GlobalInternalStrings.CurrentPanes">
            <summary>
            current supported panes
            </summary>
        </member>
        <member name="T:Rainbow.Services.ServiceHelper">
            <summary>
            This class contains static methods for working with both community 
            and RSS services
            </summary>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.FillRSSServiceRequestInfo(System.Collections.Specialized.NameValueCollection,System.String@,Rainbow.Services.ServiceRequestInfo@)">
            <summary>
            This function return's true if no problem reading ServiceRequestInfo parameters
            </summary>
            <param name="Params">The page Request.Params</param>
            <param name="parameterError">out: all param that were bad</param>
            <param name="requestInfo">out: a filled ServiceRequestInfo class</param>
            <returns>bool</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.AddRSSRequestParameters(Rainbow.Services.ServiceRequestInfo)">
            <summary>
                
            </summary>
            <param name="sri" type="Rainbow.Services.ServiceRequestInfo">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.GetResponseTabList(System.Int32,System.Int32,System.String,Rainbow.Services.ServiceRequestInfo@)">
            <summary>
            Gets a list of tabs as described in requestInfo
            </summary>
            <param name="portalID">Only tabs for portalID is returned</param>
            <param name="userID">User ID. If -1 the user is Annonymous/Guest</param>
            <param name="applicationFullPath">Full URL path to rainbow site</param>
            <param name="requestInfo">a filled ServiceRequestInfo class</param>
            <returns>ArrayList</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.GetResponseModuleList(System.Int32,System.Int32,System.String,Rainbow.Services.ServiceRequestInfo@)">
            <summary>
            Gets a list of modules as described in requestInfo
            </summary>
            <param name="portalID">Only modules for portalID is returned</param>
            <param name="userID">User ID. If -1 the user is Annonymous/Guest</param>
            <param name="applicationFullPath">Full URL path to rainbow site</param>
            <param name="requestInfo">a filled ServiceRequestInfo class</param>
            <returns>ArrayList</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.GetResponseItemList(System.Int32,System.Int32,System.String,Rainbow.Services.ServiceRequestInfo@)">
            <summary>
            Gets a list of items as described in requestInfo
            </summary>
            <param name="portalID">Only items for portalID is returned</param>
            <param name="userID">User ID. If -1 the user is Annonymous/Guest</param>
            <param name="applicationFullPath">Full URL path to rainbow site</param>
            <param name="requestInfo">a filled ServiceRequestInfo class</param>
            <returns>ArrayList</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.GetPortalIDViaAlias(System.String,System.Int32@,Rainbow.UI.Page)">
            <summary>
            Get portal ID from database [rb_Portals].[PortalAlias]. 
            Return true if success and fill parameter portalID
            </summary>
            <param name="portalAlias">The alias to look up</param>
            <param name="portalID">Return ID here for portalAlias</param>
            <param name="rainbowPage">Null is allowed here</param>
            <returns>True if a ID for portalAlias was found</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.CallService(System.Int32,System.Int32,System.String,Rainbow.Services.ServiceRequestInfo@,Rainbow.UI.Page)">
            <summary>
            Call local or external service
            </summary>
            <param name="requestInfo">a filled ServiceRequestInfo class</param>
            <returns>ServiceResponseInfo</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.CallRssService(Rainbow.Services.ServiceRequestInfo)">
            <summary>
            Calls an RSS service and returns the service response.
            This method goes crazy with the Regex class to parse the response
            from an RSS service. After testing, I discovered that most
            RSS services do not return a valid XML response. That requires
            parsing through possibly faulty XML (missing end tags, etc.)
            </summary>
            <param name="requestInfo">a filled ServiceRequestInfo class</param>
            <returns>ServiceResponseInfo</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.GetWebPage(System.String)">
            <summary>
            Retrieves a Web page that represents an RSS response.
            If no reply in 15 seconds, it gives up.
            </summary>
            <param name="url">URL of RSS service</param>
            <returns>string</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.CallCommunityService(Rainbow.Services.ServiceRequestInfo,System.String)">
            <summary>
            Calls a community Web service. This method uses a Web service
            proxy class to call a community service from (possibly) another
            community Web site.
            </summary>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.#ctor">
            <summary>
            Use private constructor for class with static methods.
            </summary>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.CreateErrorRSSFeed(System.String,System.String,System.String)">
            <summary>
            Creates a Error RSS Rainbow Feed
            </summary>
            <param name="title">Used in the title section of the RSS feed</param>
            <param name="link">Used as the link</param>
            <param name="description">Used in the description section of the RSS feed</param>
            <returns>string</returns>
        </member>
        <member name="M:Rainbow.Services.ServiceHelper.CreateSimpleRSSFeed(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Creates a simple RSS Rainbow Feed
            </summary>
            <param name="title">Used in the title section of the RSS feed</param>
            <param name="link">Used as the link</param>
            <param name="description">Used in the description section of the RSS feed</param>
            <param name="imageTitle"></param>
            <param name="imageUrl"></param>
            <param name="imageLink"></param>
            <param name="imageWidth"></param>
            <param name="imageHeight"></param>
            <param name="itemTitle"></param>
            <param name="itemLink"></param>
            <param name="itemDescription"></param>
            <returns>string</returns>
        </member>
        <member name="T:Rainbow.DesktopModules.PrintFooter">
            <summary>
            Footer for Print page
            </summary>
        </member>
        <member name="F:Rainbow.DesktopModules.PrintFooter.LayoutPlaceHolder">
            <summary>
            Placeholder for current control
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.PrintFooter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.PropertiesDataType">
            <summary>
            This class holds datatypes used in SettingItem.
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.CssHelper">
            <summary>
            CssHelper object (Jes1111)
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.CssHelper.ALLOW_IMPORTS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.CssHelper.INCLUDE_COMMENTS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.CssHelper.PARSE_IMPORTS">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.CssHelper.SELECTOR_PREFIX">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.CssHelper.portalSettings">
            <summary>
                
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.CssHelper.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.CssHelper.ParseCss(System.String)">
            <summary>
                
            </summary>
            <param name="cssFileName" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.CssHelper.ParseCss(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                
            </summary>
            <param name="cssFileName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="selectorPrefix" type="string">
                <para>
                    
                </para>
            </param>
            <param name="allowImports" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="parseImports" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="includeComments" type="bool">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.CssHelper.ParseCss(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.Text.StringBuilder)">
            <summary>
                
            </summary>
            <param name="cssFileName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="selectorPrefix" type="string">
                <para>
                    
                </para>
            </param>
            <param name="allowImports" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="parseImports" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="includeComments" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="sb" type="System.Text.StringBuilder">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.CssHelper.ParseCss(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
                
            </summary>
            <param name="cssFileName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="selectorPrefix" type="string">
                <para>
                    
                </para>
            </param>
            <param name="allowImports" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="parseImports" type="bool">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.CssHelper.ParseCss(System.String,System.String,System.Boolean)">
            <summary>
                
            </summary>
            <param name="cssFileName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="selectorPrefix" type="string">
                <para>
                    
                </para>
            </param>
            <param name="allowImports" type="bool">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.CssHelper.ParseCss(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="cssFileName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="selectorPrefix" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="T:Rainbow.Helpers.StringTokenizer">
            <summary>
            StringTokenizer tokenized string (or stream) into tokens.
            
            ********************************************************
            *	Author: Andrew Deren
            *	Date: July, 2004
            *	http://www.adersoftware.com
            * 
            *	StringTokenizer class. You can use this class in any way you want
            * as long as this header remains in this file.
            * 
            **********************************************************
            </summary>
            <remarks>
            modified by Jes1111 to be specific to CSS
            </remarks>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.#ctor(System.String)">
            <summary>
                
            </summary>
            <param name="data" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.#ctor(System.IO.StreamReader)">
            <summary>
                
            </summary>
            <param name="reader" type="System.IO.StreamReader">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.Next">
            <summary>
                
            </summary>
            
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.Consume">
            <summary>
                
            </summary>
            
            <returns>
                A char value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.CreateToken(Rainbow.Helpers.TokenKind)">
            <summary>
                
            </summary>
            <param name="kind" type="Rainbow.Helpers.TokenKind">
                <para>
                    
                </para>
            </param>
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.CreateToken(Rainbow.Helpers.TokenKind,System.String)">
            <summary>
                
            </summary>
            <param name="kind" type="Rainbow.Helpers.TokenKind">
                <para>
                    
                </para>
            </param>
            <param name="value" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.IsSymbol(System.Char)">
            <summary>
            checks whether c is a symbol character.
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.LA(System.Int32)">
            <summary>
                
            </summary>
            <param name="count" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A char value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadAtRule">
            <summary>
                
            </summary>
            
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadBlock">
            <summary>
                
            </summary>
            
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadComment">
            <summary>
                
            </summary>
            
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadImportRule">
            <summary>
                
            </summary>
            
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadNumber">
            <summary>
            reads number. Number is: DIGIT+ ("." DIGIT*)?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadSelector">
            <summary>
                
            </summary>
            
            <returns>
                A Rainbow.Helpers.Token value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadString">
            <summary>
            reads all characters until next " is found.
            If string.Empty (2 quotes) are found, then they are consumed as
            part of the string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadWhitespace">
            <summary>
            reads all whitespace characters (does not include newline)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.ReadWord">
            <summary>
            reads word. Word contains any alpha character or _
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.Reset">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.StringTokenizer.StartRead">
            <summary>
            save read point positions so that CreateToken can use those
            </summary>
        </member>
        <member name="P:Rainbow.Helpers.StringTokenizer.IgnoreWhiteSpace">
            <summary>
            if set to true, white space characters will be ignored,
            but EOL and whitespace inside of string will still be tokenized
            </summary>
        </member>
        <member name="P:Rainbow.Helpers.StringTokenizer.SymbolChars">
            <summary>
            gets or sets which characters are part of TokenKind.Symbol
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.TokenKind">
            <summary>
                ********************************************************
                *	Author: Andrew Deren
                *	Date: July, 2004
                *	http://www.adersoftware.com
                * 
                *	StringTokenizer class. You can use this class in any way you want
                * as long as this header remains in this file.
                * 
                **********************************************************
            </summary>
            <remarks>
                modified by Jes1111 to be specific to CSS
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Unknown">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Word">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Number">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.QuotedString">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.WhiteSpace">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Symbol">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.EOL">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.EOF">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Comment">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Selector">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Block">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.AtRule">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.ImportRule">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.TokenKind.Error">
            <summary>
                
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.Token">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.Token.column">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.Token.kind">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.Token.line">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.Token.value">
            <summary>
                
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.Token.#ctor(Rainbow.Helpers.TokenKind,System.String,System.Int32,System.Int32)">
            <summary>
                
            </summary>
            <param name="kind" type="Rainbow.Helpers.TokenKind">
                <para>
                    
                </para>
            </param>
            <param name="value" type="string">
                <para>
                    
                </para>
            </param>
            <param name="line" type="int">
                <para>
                    
                </para>
            </param>
            <param name="column" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="P:Rainbow.Helpers.Token.Column">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Helpers.Token.Kind">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Helpers.Token.Line">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Helpers.Token.Value">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Helpers.HttpHelper">
            <summary> 
            HttpHelper
            by Phillo 22/01/2003
            </summary> 
        </member>
        <member name="M:Rainbow.Helpers.HttpHelper.GetHttpStream(System.String,System.Int32)">
            <summary>
                
            </summary>
            <param name="pUrl" type="string">
                <para>
                    
                </para>
            </param>
            <param name="pTimeout" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.IO.Stream value...
            </returns>
        </member>
        <member name="T:Rainbow.Design.ThemeItem">
            <summary>
            ThemeItem encapsulates the items of Theme list.
            Uses IComparable interface to allow sorting by name.
            </summary>
        </member>
        <member name="M:Rainbow.Design.ThemeItem.CompareTo(System.Object)">
            <summary>
                
            </summary>
            <param name="value" type="object">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="P:Rainbow.Design.ThemeItem.Name">
            <summary>
            The name of the theme
            </summary>
        </member>
        <member name="T:Rainbow.Admin.Logoff">
            <summary>
            The Logoff page is responsible for signing out a user 
            from the cookie authentication, and then redirecting 
            the user back to the portal home page.
            This page is executed when the user	clicks 
            the Logoff button at the top of the page.
            </summary>
        </member>
        <member name="M:Rainbow.Admin.Logoff.OnInit(System.EventArgs)">
            <summary>
            Raises the Init event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Admin.Logoff.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.ModuleItem">
            <summary>
            This class encapsulates the basic attributes of a Module, and is used
            by the administration pages when manipulating modules.<br/>
            ModuleItem implements the IComparable interface so that an ArrayList
            of ModuleItems may be sorted by ModuleOrder, using the 
            ArrayList's Sort() method.
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.ModuleItem.CompareTo(System.Object)">
            <summary>
            Public comparer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Configuration.ModuleItem.Order">
            <summary>
            Order
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.ModuleItem.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.ModuleItem.PaneName">
            <summary>
            Pane name
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.ModuleItem.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.ModuleItem.ModuleDefID">
            <summary>
            Definition id
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.CachedPortalModuleControl">
            <summary>
            The CachedPortalModuleControl class is a custom server control that
            the Portal framework uses to optionally enable output caching of 
            individual portal module's content.<br />
            If a CacheTime value greater than 0 seconds is specified within the 
            Portal.Config configuration file, then the CachePortalModuleControl
            will automatically capture the output of the Portal Module User Control
            it wraps. It will then store this captured output within the ASP.NET
            Cache API. On subsequent requests (either by the same browser -- or
            by other browsers visiting the same portal page), the CachedPortalModuleControl
            will attempt to resolve the cached output out of the cache.
            </summary>
            <remarks>
            In the event that previously cached output can't be found in the
            ASP.NET Cache, the CachedPortalModuleControl will automatically instatiate
            the appropriate portal module user control and place it within the
            portal page.
            </remarks>
        </member>
        <member name="M:Rainbow.UI.WebControls.CachedPortalModuleControl.CreateChildControls">
            <summary>
            The CreateChildControls method is called when the ASP.NET Page Framework
            determines that it is time to instantiate a server control.<br/>
            The CachedPortalModuleControl control overrides this method and attempts
            to resolve any previously cached output of the portal module from the ASP.NET cache.  
            If it doesn't find cached output from a previous request, then the
            CachedPortalModuleControl will instantiate and add the portal module's
            User Control instance into the page tree.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.CachedPortalModuleControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            The Render method is called when the ASP.NET Page Framework
            determines that it is time to render content into the page output stream.
            The CachedPortalModuleControl control overrides this method and captures
            the output generated by the portal module user control. It then 
            adds this content into the ASP.NET Cache for future requests.
            </summary>
            <param name="output"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.CachedPortalModuleControl.ModuleConfiguration">
            <summary>
            ModuleConfiguration
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.CachedPortalModuleControl.ModuleID">
            <summary>
            ModuleID
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.CachedPortalModuleControl.PortalID">
            <summary>
            PortalID
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.CachedPortalModuleControl.CacheKey">
            <summary>
            The CacheKey property is used to calculate a "unique" cache key
            entry to be used to store/retrieve the portal module's content
            from the ASP.NET Cache.
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.Paging">
            <summary>
            Paging class, Rainbow special edition
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.Paging.tbPageNumber">
            <summary>
            Page number
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.Paging.lblPageCount">
            <summary>
            Total page count
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.Paging.lblof">
            <summary>
            Label containg text 'of'
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.Paging.btnFirst">
            <summary>
            Button 'First'
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.Paging.btnPrev">
            <summary>
            Button 'Previous'
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.Paging.btnNext">
            <summary>
            Button 'Next'
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.Paging.btnLast">
            <summary>
            Button 'Last'
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.Paging.OnMoveHandler(System.EventArgs)">
            <summary>
            Used by OnMove event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.Paging.RefreshButtons">
            <summary>
            Enable/disable the nav controls based on the current context, update labels
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.Paging.#ctor">
            <summary>
            Main class manging pages
            </summary>
        </member>
        <member name="E:Rainbow.UI.WebControls.Paging.OnMove">
            <summary>
            Move event raised when a move is performed
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.Paging.RecordsPerPage">
            <summary>
            Number of records per page
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.Paging.HideOnSinglePage">
            <summary>
            Hide when on single page hides controls when 
            there is only one page
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.Paging.PageNumber">
            <summary>
            Current page number
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.Paging.CausesValidation">
            <summary>
            Gets or sets a value indicating whether validation is performed when the control buttons are clicked.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.Paging.RecordCount">
            <summary>
            Total Record Count
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.Paging.PageCount">
            <summary>
            Total pages count
            </summary>
        </member>
        <member name="T:Rainbow.Design.ThemeImage">
            <summary>
            A single named Image
            </summary>
        </member>
        <member name="M:Rainbow.Design.ThemeImage.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeImage.#ctor(System.String,System.String,System.Double,System.Double)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="imageUrl" type="string">
                <para>
                    
                </para>
            </param>
            <param name="width" type="double">
                <para>
                    
                </para>
            </param>
            <param name="height" type="double">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeImage.#ctor(System.String,System.Web.UI.WebControls.Image)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="img" type="System.Web.UI.WebControls.Image">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemeImage.GetImage">
            <summary>
                
            </summary>
            
            <returns>
                A System.Web.UI.WebControls.Image value...
            </returns>
        </member>
        <member name="P:Rainbow.Design.ThemeImage.Height">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Design.ThemeImage.ImageUrl">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Design.ThemeImage.Name">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Design.ThemeImage.Width">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.UI.DataTypes.FolderDataType">
            <summary>
            Implements a DropDownList with a list of directorys 
            and a TextBox for add and create a new directory.
            </summary>
        </member>
        <member name="M:Rainbow.UI.DataTypes.FolderDataType.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="baseDirectory">Create if not exists</param>
            <param name="defaultDirectory">Create if not exists</param>
        </member>
        <member name="T:Rainbow.Configuration.WorkflowState">
            <summary>
            WorkflowState
            by Geert.Audenaert@Syntegra.Com
            Date: 27/2/2003
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.WorkflowState.Original">
            <summary>
            The staging and production content are identical
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.WorkflowState.Working">
            <summary>
            Were working on the staging content
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.WorkflowState.ApprovalRequested">
            <summary>
            The staging content is ready and approval is been requested
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.WorkflowState.Approved">
            <summary>
            The staging content is approved and ready to be published
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.AddEditPage">
            <summary>
            Summary description for Property Page
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.AddEditPage.OnInit(System.EventArgs)">
            <summary>
            On init
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.AddEditPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.AddEditPage.InitializeControl">
            <summary>
            Purpose: Method to initialize the control.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.AddEditPage.EditControl_DataActionStart(System.Object,Rainbow.KickStarter.CommonClasses.DataChangeEventArgs)">
            <summary>
            Purpose: Method to Handle the EditControl actions events.
            </summary>
            <param name="sender" type="Rainbow.DesktopModules.WTS.BusinessLayer.Games"></param>
            <param name="eventArgs" type="DataChangeEventArgs"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.AddEditPage.EditControl_DataActionEnd(System.Object,Rainbow.KickStarter.CommonClasses.DataChangeEventArgs)">
            <summary>
            Purpose: Method to Handle the EditControl actions events.
            </summary>
            <param name="sender" type="Rainbow.DesktopModules.WTS.BusinessLayer.Games"></param>
            <param name="eventArgs" type="DataChangeEventArgs"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.AddEditPage.EditControl_CancelEdit(System.Object,System.EventArgs)">
            <summary>
            Cancel
            </summary>
            <param name="sender" type="object"></param>
            <param name="eventArgs" type="EventArgs"></param>
        </member>
        <member name="T:Rainbow.Services.Client.communityService">
            <remarks/>
        </member>
        <member name="M:Rainbow.Services.Client.communityService.#ctor">
            <remarks/>
        </member>
        <member name="M:Rainbow.Services.Client.communityService.GetCommunityContent(Rainbow.Services.ServiceRequestInfo)">
            <remarks/>
        </member>
        <member name="M:Rainbow.Services.Client.communityService.BeginGetCommunityContent(Rainbow.Services.ServiceRequestInfo,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Rainbow.Services.Client.communityService.EndGetCommunityContent(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Rainbow.UI.WebControls.ModuleButton">
            <summary>
             ModuleButton. Custom control for Module buttons ... derives from HtmlAnchor. 
             Allows text, image or both. Can be url hyperlink or postback button.
             Use ServerClick event to pick up on postback.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ModuleButton.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ModuleButton.OnInit(System.EventArgs)">
            <summary>
            Init event handler.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ModuleButton.OnLoad(System.EventArgs)">
            <summary>
            Load event handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.WebControls.ModuleButton.GetPopupCommand">
            <summary>
            Builds Javascript popup command
            </summary>
            <returns>popup command as a string</returns>
        </member>
        <member name="P:Rainbow.UI.WebControls.ModuleButton.Name">
            <summary>
            Hides inherited Name
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ModuleButton.CssClass">
            <summary>
            Sets CSS Class on control
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ModuleButton.Group">
            <summary>
            Holds Button group enum: User, Admin or Custom
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ModuleButton.Image">
            <summary>
            Button image
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ModuleButton.EnglishName">
            <summary>
            Esperantus translation
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ModuleButton.TranslationKey">
            <summary>
            Esperantus translation key
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.ModuleButton.RenderAs">
            <summary>
            Active RenderAs option
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ModuleButton.RenderOptions">
            <summary>
            Rendering options
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ModuleButton.ButtonGroup">
            <summary>
            Group options
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.FCK.filemanager.upload.aspx.upload">
            <summary>
            upload files to server.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.FCK.filemanager.upload.aspx.upload.InitializeComponent">
            <summary>
            Método necesario para admitir el Diseñador. No se puede modificar
            el contenido del método con el editor de código.
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.MultiSelectListDataType">
            <summary>
            MultiSelectListDataType
            Implements a listbox that allows multiple selections 
            (returns a colon-delimited string)
            by John Bowen
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.UploadedFileDataType">
            <summary>
            Allows upload a file on current portal folder
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.DesktopFooter">
            <summary>
            	Default user control placed at the bottom of each administrative page.
            </summary>
        </member>
        <member name="F:Rainbow.DesktopModules.DesktopFooter.LayoutPlaceHolder">
            <summary>
            Placeholder for current control
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.DesktopFooter.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.HttpUrlBuilder">
            <summary>
            HttpUrlBuilder
            This Class is Responsible for all the Urls in Rainbow to prevent
            hardcoded urls. 
            This makes it easier to update urls across the multiple portals
            Original ideas from John Mandia, Cory Isakson, Jes and Manu.
            </summary>
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl">
            <summary> 
            Builds the url for get to current portal home page
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String)">
            <summary> 
            Builds the url for get to current portal home page
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String,System.String)">
            <summary> 
            Builds the url for get to current portal home page
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
            <param name="customAttributes">Any custom attribute that can be needed</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.Int32)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page 
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="tabID">ID of the tab</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.Int32,System.String)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page 
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="tabID">ID of the tab</param> 
            <param name="urlKeywords">Add some keywords to uniquely identify this tab. Usual source is UrlKeyword from TabSettings.</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String,System.Int32)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page (non default)
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
            <param name="tabID">ID of the tab</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String,System.Int32,System.String)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page (non default)
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
            <param name="tabID">ID of the tab</param> 
            <param name="customAttributes">Any custom attribute that can be needed</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String,System.Int32,System.String,System.String)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page (non default)
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
            <param name="tabID">ID of the tab</param> 
            <param name="customAttributes">Any custom attribute that can be needed</param> 
            <param name="currentAlias">Current Alias</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String,System.Int32,System.Globalization.CultureInfo,System.String,System.String)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page (non default)
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
            <param name="tabID">ID of the tab</param> 
            <param name="culture">Client culture</param> 
            <param name="customAttributes">Any custom attribute that can be needed</param> 
            <param name="currentAlias">Current Alias</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String,System.Int32,System.Int32)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page (non default)
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
            <param name="tabID">ID of the tab</param> 
            <param name="modID">ID of the module</param>
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.BuildUrl(System.String,System.Int32,System.Int32,System.Globalization.CultureInfo,System.String,System.String,System.String)">
            <summary> 
            Takes a Tab ID and builds the url for get the desidered page (non default)
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
            <param name="targetPage">Linked page</param> 
            <param name="tabID">ID of the tab</param> 
            <param name="modID">ID of the module</param> 
            <param name="culture">Client culture</param> 
            <param name="customAttributes">Any custom attribute that can be needed. Use the following format...single attribute: paramname--paramvalue . Multiple attributes: paramname--paramvalue/paramname2--paramvalue2/paramname3--paramvalue3 </param> 
            <param name="currentAlias">Current Alias</param> 
            <param name="urlKeywords">Add some keywords to uniquely identify this tab. Usual source is UrlKeyword from TabSettings.</param> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.UrlKeyword(System.Int32)">
            <summary> 
            Builds the url for get to current portal home page
            containing the application path, portal alias, tab ID, and language. 
            </summary> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.UrlPageName(System.Int32)">
            <summary> 
            Returns the page name that has been specified. 
            </summary> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.IsPlaceholder(System.Int32)">
            <summary> 
            2_aug_2004 Cory Isakson enhancement
            Determines if a tab is simply a placeholder in the navigation
            </summary> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.TabLink(System.Int32)">
            <summary> 
            2_aug_2004 Cory Isakson enhancement
            Returns the URL for a tab that is a link only.
            </summary> 
        </member>
        <member name="M:Rainbow.HttpUrlBuilder.Clear(System.Int32)">
            <summary> 
            Clears any Url Elements e.g IsPlaceHolder, TabLink, UrlKeywords and PageName etc
            that may be stored (either in cache, xml etc depending on the UrlBuilder implementation  
            </summary> 
        </member>
        <member name="T:Rainbow.UI.DataTypes.DoubleDataType">
            <summary>
            DoubleDataType
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.NumericDataType">
            <summary>
            NumericDataType
            </summary>
        </member>
        <member name="T:Rainbow.BLL.Utils.WindowStateEnum">
            <summary>
            The states a window can be in. Information is later persisted to
            the database
            </summary>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateEnum.None">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateEnum.Closed">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateEnum.Open">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateEnum.Minimized">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateEnum.Maximized">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.BLL.Utils.WindowStateStrings">
            <summary>
            Common Strings used for the window state
            </summary>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateStrings.ButtonMinLocalized">
            <summary>
                User these names for localization lookup 
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateStrings.ButtonMaxLocalized">
            <summary>
                User these names for localization lookup 
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateStrings.ButtonClosedLocalized">
            <summary>
                User these names for localization lookup 
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateStrings.ButtonMinName">
            <summary>
                use these names for theme lookup and attribute
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateStrings.ButtonMaxName">
            <summary>
                use these names for theme lookup and attribute
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.BLL.Utils.WindowStateStrings.ButtonCloseName">
            <summary>
                use these names for theme lookup and attribute
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.DesktopModules.PrintHeader">
            <summary>
            Header for Print page
            </summary>
        </member>
        <member name="F:Rainbow.DesktopModules.PrintHeader.LayoutPlaceHolder">
            <summary>
            Placeholder for current control
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.PrintHeader.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.CustomListDataType">
            <summary>
            CustomListDataType
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.ModuleInstall">
            <summary>
            ModuleInstall incapsulates all the logic for install, 
            uninstall modules on portal
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.ModuleInstall.InstallGroup(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="groupFileName"></param>
            <param name="install"></param>
        </member>
        <member name="M:Rainbow.Helpers.ModuleInstall.GetInstallGroup(System.String)">
            <summary>
            
            </summary>
            <param name="groupFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.ModuleInstall.UninstallGroup(System.String)">
            <summary>
            
            </summary>
            <param name="groupFileName"></param>
        </member>
        <member name="M:Rainbow.Helpers.ModuleInstall.Install(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="friendlyName"></param>
            <param name="desktopSource"></param>
            <param name="mobileSource"></param>
        </member>
        <member name="M:Rainbow.Helpers.ModuleInstall.Install(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Installs module
            </summary>
            <param name="friendlyName"></param>
            <param name="desktopSource"></param>
            <param name="mobileSource"></param>
            <param name="install"></param>
        </member>
        <member name="M:Rainbow.Helpers.ModuleInstall.Uninstall(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="desktopSource"></param>
            <param name="mobileSource"></param>
        </member>
        <member name="T:Rainbow.UI.DataTypes.WebCompile.GlobalBase">
            <summary>
            Summary description for WebCompile.
            This class added to the Rainbow Namespace Aug_28_2003 by Cory Isakson
            Code taken from Paul Wilson's article at:
            http://www.aspalliance.com/PaulWilson/Articles/?id=12
            </summary>
        </member>
        <member name="M:Rainbow.Global.Application_BeginRequest(System.Object,System.EventArgs)">
            <summary>
            Application_BeginRequest Event
            
            The Application_BeginRequest method is an ASP.NET event that executes 
            on each web request into the portal application.  The below method
            obtains the current tabIndex and TabID from the querystring of the 
            request -- and then obtains the configuration necessary to process
            and render the request.
            
            This portal configuration is stored within the application's "Context"
            object -- which is available to all pages, controls and components
            during the processing of a single request.
            
            Changed portal alias behavior. Now you can change portals via querystring.
            An option was added to web.config:
            IgnoreFirstDomain (boolean): if true the trailing domin is ignored
            (as in original rainbow), if false the full domain is considered.
            Please note that changing this option requires the complete update 
            of every portalalias on db.
            Thanks to Cory Isakson for suggestions and vb code. 2002/11/29
            </summary>
        </member>
        <member name="M:Rainbow.Global.Application_AuthenticateRequest(System.Object,System.EventArgs)">
            <summary>
            If the client is authenticated with the application, then determine
            which security roles he/she belongs to and replace the "User" intrinsic
            with a custom IPrincipal security object that permits "User.IsInRole"
            role checks within the application
            
            Roles are cached in the browser in an in-memory encrypted cookie.  If the
            cookie doesn't exist yet for this session, create it.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Global.Application_Start">
            <summary>
            Application_Start()
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.TabsBox">
            <summary>
            Box tab
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.TabsBox.Add(Rainbow.Configuration.TabStripDetails)">
            <summary>
            Add
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Configuration.TabsBox.Item(System.Int32)">
            <summary>
            TabStripDetails indexer
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ItemNavigation">
            <summary>
            ItemNavigation inherits from MenuNavigation
            and adds the functionality of the ShopNavigation with ALL types of binding.
            all subcategories are added as an ItemID property.
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.MenuNavigation">
            <summary>
            Menu navigation inherits from Menu Webcontrol
            and adds the 'glue' to link to tabs tree.
            Bugfix #656794 'Menu rendering adds all tabs' by abain
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.MenuNavigation.DataBind">
            <summary>
            Do databind.
            Thanks to abain for cleaning up the code and fixing the bugs
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.MenuNavigation.AddMenuTreeNode(System.Int32,Rainbow.Configuration.TabStripDetails)">
            <summary> 
            Add a Menu Tree Node if user in in the list of Authorized roles. 
            Thanks to abain for fixing authorization bug.
            </summary> 
            <param name="tabIndex">Index of the tab</param> 
            <param name="myTab">Tab to add to the MenuTreeNodes collection</param> 
        </member>
        <member name="M:Rainbow.UI.WebControls.MenuNavigation.GetInnerDataSource">
            <summary>
            Populates ArrayList of tabs based on binding option selected.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rainbow.UI.WebControls.MenuNavigation.AutoShopDetect">
            <summary> 
            Indicates if control should detect products module when loads 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.MenuNavigation.AutoBind">
            <summary> 
            Indicates if control should bind when loads 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.MenuNavigation.Bind">
            <summary> 
            Describes how this control should bind to db data 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.MenuNavigation.ParentTabID">
            <summary>
            defines the parentTabID when using BindOptionDefinedParent
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ItemNavigation.DataBind">
            <summary>
            Do databind.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ItemNavigation.AddRootNode">
            <summary>
            Add the current tab as top menu item.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ItemNavigation.AddMenuTreeNode(System.Int32,Rainbow.Configuration.TabStripDetails)">
            <summary> 
            Add a Menu Tree Node if user in in the list of Authorized roles. 
            Thanks to abain for fixing authorization bug.
            </summary> 
            <param name="tabIndex">Index of the tab</param> 
            <param name="myTab">Tab to add to the MenuTreeNodes collection</param> 
        </member>
        <member name="M:Rainbow.UI.WebControls.ItemNavigation.RecourseMenu(System.Int32,Rainbow.Configuration.TabsBox,DUEMETRI.UI.WebControls.HWMenu.MenuTreeNode)">
            <summary>
            modified to transmit the TabID and TabIndex for the item page
            </summary>
            <param name="tabIDItemsRoot"></param>
            <param name="t"></param>
            <param name="mn"></param>
            <returns></returns>
        </member>
        <member name="T:Rainbow.Helpers.JavaScriptBuilder">
             <summary>
             Create well formatted or completely unformatted javascript
             code with minimal effort.
             </summary>
             <remarks>
             Ported to Rainbow by mario [mario@hartmann.net]
             Original written by Paul Riley
             [http://www.codeproject.com/aspnet/AspNetControlJs.asp]
            </remarks>
        </member>
        <member name="M:Rainbow.Helpers.JavaScriptBuilder.#ctor">
            <summary>
            Instantiate a JavaScriptWriter for unformatted code
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.JavaScriptBuilder.#ctor(System.Boolean)">
            <summary>
            Instantiate a JavaScriptWriter with Formatted switch
            </summary>
            <param name="Formatted">Format Code?</param>
        </member>
        <member name="M:Rainbow.Helpers.JavaScriptBuilder.AddLine(System.String[])">
            <summary>
            Add a line of code
            </summary>
            <param name="parts">Parts of the line as array of strings</param>
        </member>
        <member name="M:Rainbow.Helpers.JavaScriptBuilder.OpenBlock">
            <summary>
            Open a code block and increase indent level
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.JavaScriptBuilder.CloseBlock">
            <summary>
            Close code block and decrease indent level
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.JavaScriptBuilder.AddCommentLine(System.String[])">
            <summary>
            Add a comment line to the code, where formatting is set
            </summary>
            <param name="CommentText">Parts of the comment as an array of strings</param>
        </member>
        <member name="M:Rainbow.Helpers.JavaScriptBuilder.ToString">
            <summary>
            Convert to string (adding script start and end tags)
            </summary>
            <returns>Inner script text</returns>
        </member>
        <member name="P:Rainbow.Helpers.JavaScriptBuilder.Indent">
            <summary>
            Current level of indent
            </summary>
        </member>
        <member name="T:Rainbow.Admin.ModuleSettingsPage">
            <summary>
            Use this page to modify title and permission on portal modules<br />
            The ModuleSettings.aspx page is used to enable administrators to view/edit/update
            a portal module's settings (title, output cache properties, edit access)
            </summary>
        </member>
        <member name="M:Rainbow.Admin.ModuleSettingsPage.Page_Load(System.Object,System.EventArgs)">
            <summary>
            The Page_Load server event handler on this page is used
            to populate the module settings on the page.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Admin.ModuleSettingsPage.OnUpdate(System.EventArgs)">
            <summary>
            The ApplyChanges_Click server event handler on this page is used
            to save the module settings into the portal configuration system.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Admin.ModuleSettingsPage.BindData">
            <summary>
            The BindData helper method is used to populate a asp:datalist
            server control with the current "edit access" permissions
            set within the portal configuration system
            </summary>
        </member>
        <member name="M:Rainbow.Admin.ModuleSettingsPage.OnInit(System.EventArgs)">
            <summary>
            Raises the Init event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Admin.ModuleSettingsPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rainbow.Admin.ModuleSettingsPage.AllowedModules">
            <summary>
            Only can use this page from tab with original module
            jviladiu@portalServices.net (2004/07/22)
            </summary>
        </member>
        <member name="T:Rainbow.Default">
            <summary>
            The Default.aspx page simply tests 
            the browser type and redirects either to
            the DesktopDefault or MobileDefault pages, 
            depending on the device type.
            </summary>
        </member>
        <member name="M:Rainbow.Default.OnInit(System.EventArgs)">
            <summary>
            Raises OnInitEvent
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Default.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.BLL.Utils.CookieUtil">
            <summary>
            This class manages cookies
            </summary>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.Add(System.String,System.Object)">
            <summary>
            Add the cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.Add(System.Int32,System.Object)">
            <summary>
            Add the cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.Remove(System.Int32)">
            <summary>
            Remove a cookie
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.Remove(System.String)">
            <summary>
            Remove a Cookie
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.Retrieve(System.Int32)">
            <summary>
            Retrieve a cookie
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.Retrieve(System.String)">
            <summary>
            Retrieve a Cookie
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.retrieveImpl(System.String)">
            <summary>
            Implemented the remove functionality
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.removeImpl(System.String)">
            <summary>
            Implemented the remove functionality
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.addImpl(System.String,System.String)">
            <summary>
            Implementation of the add cookie
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.setCookie(System.Web.HttpCookie@)">
            <summary>
            Set cookie 
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:Rainbow.BLL.Utils.CookieUtil.clearCookie(System.Web.HttpCookie@)">
            <summary>
            Clear the cookie
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="P:Rainbow.BLL.Utils.CookieUtil.Expiration">
            <summary>
            Cookie Expiration 
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.WorkFlowVersion">
            <summary>
            Enumeration for workflow version
            by Geert.Audenaert@Syntegra.Com
            Date: 6/2/2003
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.WorkFlowVersion.Production">
            <summary>
            Production
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.WorkFlowVersion.Staging">
            <summary>
            Staging
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.DesktopNavigation">
            <summary>
            Represents a flat navigation bar. 
            One dimension. 
            Can render horizontally or vertically.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.DesktopNavigation.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.DesktopNavigation.GetInnerDataSource">
            <summary>
            Populates ArrayList of tabs based on binding option selected.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopNavigation.AutoBind">
            <summary>
            Indicates if control should bind when loads
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopNavigation.Bind">
            <summary>
            Describes how this control should bind to db data
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopNavigation.ParentTabID">
            <summary>
            defines the parentTabID when using BindOptionDefinedParent
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.DesktopNavigation.DataSource">
            <summary>
            DataSource
            </summary>
        </member>
        <member name="T:Rainbow.BLL.UserConfig.UserDesktop">
            <summary>
            *********************************************************************
            
            UserDesktop Class
            
            Class that encapsulates the detailed settings for a User Desktop
            
            *********************************************************************
            </summary>
        </member>
        <member name="T:Rainbow.BLL.Base.BLLBase">
            <summary> 
            Base class for all the classes in the BLL
            </summary>
        </member>
        <member name="M:Rainbow.BLL.Base.BLLBase.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.Contains(System.Int32)">
            <summary>
            Is this module id present
            </summary>
            <param name="module_id"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.UpdateUserDesktop(System.Int32,Rainbow.BLL.Utils.WindowStateEnum,System.Int32)">
            <summary>
             update the desktop
            </summary>
            <param name="module_id"></param>
            <param name="state"></param>
            <param name="tabID"></param>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.isClosed(System.Int32)">
            <summary>
            is the window/module closed
            </summary>
            <param name="module_id"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.isMinimized(System.Int32)">
            <summary>
            is the window/module minimized
            </summary>
            <param name="module_id"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.isMaximized(System.Int32)">
            <summary>
            is the window maximized
            </summary>
            <param name="module_id"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.ConfigureDesktop(System.Int32,System.Int32)">
            <summary>
            Get the user configuraton
            </summary>
            <param name="userid"></param>
            <param name="portalID"></param>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.ResetPersistentDesktop(System.Int32,System.Int32)">
            <summary>
            Reset the user's settings as they may have changed
            since we last retrieved them
            </summary>
            <param name="userid"></param>
            <param name="portalID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.ResetDesktop(System.Int32)">
            <summary>
            clear ALL entries from the user windows
            </summary>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.SaveUserDesktop">
            <summary>
            Save the user desktop
            </summary>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.FindUserWindows(Rainbow.Security.User@)">
            <summary>
            Find the User Window Information based on user id
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.FindUserWindows(System.Int32)">
            <summary>
            Find the User Window Information based on user id
            </summary>
            <param name="uid"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.isState(System.Int32,Rainbow.BLL.Utils.WindowStateEnum)">
            
            <summary>
            Is a certain state active or disabled
            </summary>
            <param name="module_id"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.UserConfig.UserDesktop.SaveUserState">
            <summary>
            Persist the user window/modules settings
            </summary>
        </member>
        <member name="P:Rainbow.BLL.UserConfig.UserDesktop.UserWindows">
            All these methods are static as the holder of information is as well.
            This means this is held for ALL users. Thus, it could be used to get
            a list of users onlined, what they are working on, where they have been, etc.
            For now, it just holds state on their desktop
            
            
            <summary>
            All the user windows are stored in a  hash table
            with the userid as the key and the value as another hashtable of modules. (key/value pair)
            
            </summary>
        </member>
        <member name="T:Rainbow.Security.IEditUserProfile">
            <summary>
            Implement this interface in custom edit / register profile classes
            </summary>
        </member>
        <member name="M:Rainbow.Security.IEditUserProfile.SaveUserData">
            <summary>
            This procedure should persist the user data on db
            </summary>
            <returns>The user id</returns>
        </member>
        <member name="P:Rainbow.Security.IEditUserProfile.EditMode">
            <summary>
            Returns true when from control is on edit mode
            </summary>
        </member>
        <member name="P:Rainbow.Security.IEditUserProfile.RedirectPage">
            <summary>
            Stores the page where to redirect user on save
            </summary>
        </member>
        <member name="T:Rainbow.HistoryAttribute">
            <summary>
            HistoryAttribute can be used to track code authors and modification
            </summary>
        </member>
        <member name="M:Rainbow.HistoryAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Requires all parameters
            </summary>
            <param name="name">name</param>
            <param name="email">email</param>
            <param name="version">version</param>
            <param name="date">date</param>
            <param name="comment">comment</param>
        </member>
        <member name="M:Rainbow.HistoryAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Requires name, date and comment
            </summary>
            <param name="name">name</param>
            <param name="date">date</param>
            <param name="comment">comment</param>
        </member>
        <member name="M:Rainbow.HistoryAttribute.#ctor(System.String,System.String)">
            <summary>
            Requires name, date and comment
            </summary>
            <param name="name">name</param>
            <param name="date">date</param>
        </member>
        <member name="P:Rainbow.HistoryAttribute.Name">
            <summary>
            The Author name
            </summary>
        </member>
        <member name="P:Rainbow.HistoryAttribute.Email">
            <summary>
            The Email of the Author
            </summary>
        </member>
        <member name="P:Rainbow.HistoryAttribute.Version">
            <summary>
            Modification Version
            </summary>
        </member>
        <member name="P:Rainbow.HistoryAttribute.Date">
            <summary>
            Modification date
            </summary>
        </member>
        <member name="P:Rainbow.HistoryAttribute.Comment">
            <summary>
            Modification description
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.XslHelper">
            <summary>
            XslHelper object, designed to be imported into an XSLT transform
            via XsltArgumentList.AddExtensionObject(...). Provides transform with 
            access to various Rainbow functions, such as BuildUrl(), IsInRoles(), data 
            formatting, etc. (Jes1111)
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.Localize(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="textKey" type="string">
                <para>
                    
                </para>
            </param>
            <param name="translation" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatMoney(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="myAmount" type="string">
                <para>
                    
                </para>
            </param>
            <param name="myCurrency" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatTemp(System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="tempStr" type="string">
                <para>
                    
                </para>
            </param>
            <param name="dataScale" type="string">
                <para>
                    
                </para>
            </param>
            <param name="outputScale" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.C2F(System.Double)">
            <summary>
                
            </summary>
            <param name="c" type="double">
                <para>
                    
                </para>
            </param>
            <returns>
                A double value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.F2C(System.Double)">
            <summary>
                
            </summary>
            <param name="f" type="double">
                <para>
                    
                </para>
            </param>
            <returns>
                A double value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatDateTime(System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="dateStr" type="string">
                <para>
                    
                </para>
            </param>
            <param name="dataCulture" type="string">
                <para>
                    
                </para>
            </param>
            <param name="formatStr" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatDateTime(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="dateStr" type="string">
                <para>
                    
                </para>
            </param>
            <param name="formatStr" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatDateTime(System.String)">
            <summary>
                
            </summary>
            <param name="dateStr" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatDateTime(System.String,System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="dateStr" type="string">
                <para>
                    
                </para>
            </param>
            <param name="dataCulture" type="string">
                <para>
                    
                </para>
            </param>
            <param name="outputCulture" type="string">
                <para>
                    
                </para>
            </param>
            <param name="formatStr" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatNumber(System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="numberStr" type="string">
                <para>
                    
                </para>
            </param>
            <param name="dataCulture" type="string">
                <para>
                    
                </para>
            </param>
            <param name="formatStr" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.FormatNumber(System.String,System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="numberStr" type="string">
                <para>
                    
                </para>
            </param>
            <param name="dataCulture" type="string">
                <para>
                    
                </para>
            </param>
            <param name="outputCulture" type="string">
                <para>
                    
                </para>
            </param>
            <param name="formatStr" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.CheckRoles(System.String)">
            <summary>
                
            </summary>
            <param name="authRoles" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A bool value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.AddToUrl(System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="url" type="string">
                <para>
                    
                </para>
            </param>
            <param name="paramKey" type="string">
                <para>
                    
                </para>
            </param>
            <param name="paramValue" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.BuildUrl(System.String,System.Int32)">
            <summary>
                
            </summary>
            <param name="targetPage" type="string">
                <para>
                    
                </para>
            </param>
            <param name="tabID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.BuildUrl(System.Int32,System.String)">
            <summary>
                
            </summary>
            <param name="tabID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="pathTrace" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalAlias">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalID">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.TabID">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.TabTitle">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalContentLanguage">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalUILanguage">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalDataFormattingCulture">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalLayoutPath">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalFullPath">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalName">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.PortalTitle">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.UserName">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.UserEmail">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.UserID">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.DesktopTabsXml">
            <summary>
                
            </summary>
            
            <returns>
                A System.Xml.XPath.XPathNodeIterator value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.XslHelper.SelectedOptions(System.String)">
            <summary>
                
            </summary>
            <param name="metadataXml" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="T:Rainbow.Configuration.ModuleSettings">
            <summary>
            ModuleSettings Class encapsulates the detailed settings 
            for a specific Module in the Portal.
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.ModuleID">
            <summary>
            ModuleID
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.ModuleDefID">
            <summary>
            ModuleDefID
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.TabID">
            <summary>
            TabID
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.CacheTime">
            <summary>
            CacheTime
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.ModuleOrder">
            <summary>
            ModuleOrder
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.PaneName">
            <summary>
            PaneName
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.ModuleTitle">
            <summary>
            ModuleTitle
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedEditRoles">
            <summary>
            AuthorizedEditRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedViewRoles">
            <summary>
            AuthorizedViewRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedAddRoles">
            <summary>
            AuthorizedAddRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedDeleteRoles">
            <summary>
            AuthorizedDeleteRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedPropertiesRoles">
            <summary>
            AuthorizedPropertiesRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedDeleteModuleRoles">
            <summary>
            AuthorizedDeleteModuleRoles 
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedMoveModuleRoles">
            <summary>
            AuthorizedMoveModuleRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedPublishingRoles">
            <summary>
            AuthorizedPublishingRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.AuthorizedApproveRoles">
            <summary>
            AuthorizedApproveRoles
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.WorkflowStatus">
            <summary>
            WorkflowStatus
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.SupportWorkflow">
            <summary>
            SupportWorkflow
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.ShowMobile">
            <summary>
            ShowMobile
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.ShowEveryWhere">
            <summary>
            ShowEveryWhere
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.SupportCollapsable">
            <summary>
            SupportCollapsable
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.DesktopSrc">
            <summary>
            DesktopSrc
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.MobileSrc">
            <summary>
            MobileSrc
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.GuidID">
            <summary>
            GuidID
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.Admin">
            <summary>
            Is Admin?
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.CacheDependency">
            <summary>
            String array of cache dependency files
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.ModuleSettings.Cacheable">
            <summary>
            Is Cacheable?
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.ModuleSettings.#ctor">
            <summary>
            ModuleSettings
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.ModuleSettings.GetModuleDesktopSrc(System.Int32)">
            <summary>
            The GetModuleDesktopSrc Method returns a string of
            the specified Module's Desktop Src, which can be used to 
            Load this modules control into a page.
            </summary>
            <param name="moduleID"></param>
            <returns>The desktop source path string</returns>
        </member>
        <member name="M:Rainbow.Configuration.ModuleSettings.GetModuleSettings(System.Int32,System.Collections.Hashtable)">
            <summary>
            The GetModuleSettings Method returns a hashtable of
            custom module specific settings from the database.  This method is
            used by some user control modules to access misc settings.
            </summary>
            <param name="moduleID"></param>
            <param name="_baseSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModuleSettings.GetModuleSettings(System.Int32,System.Web.UI.Page)">
            <summary>
            The GetModuleSettings Method returns a hashtable of
            custom module specific settings from the database. This method is
            used by some user control modules to access misc settings.
            </summary>
            <param name="moduleID"></param>
            <param name="page"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModuleSettings.GetModuleSettings(System.Int32)">
            <summary>
            The GetModuleSettings Method returns a hashtable of
            custom module specific settings from the database. This method is
            used by some user control modules to access misc settings.
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.ModuleSettings.UpdateModuleSetting(System.Int32,System.String,System.String)">
            <summary>
            The UpdateModuleSetting Method updates a single module setting 
            in the ModuleSettings database table.
            </summary>
            <param name="moduleID"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.Configuration.ModuleSettings.GetModuleDefinitionByID(System.Int32)">
            <summary>
            GetModuleDefinitionByID
            </summary>
            <param name="ModuleID">ModuleID</param>
            <returns>A SqlDataReader</returns>
        </member>
        <member name="T:Rainbow.Setup.Update">
            <summary>
            Summary description for Setup.
            This code copyright 2003 by DUEMETRI
            Exclusive use with Rainbowportal
            Any other use strictly prohibited
            </summary>
        </member>
        <member name="M:Rainbow.Setup.Update.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rainbow.Setup.Update.DatabaseVersion">
            <summary>
            This property returns db version.
            It does not rely on cached value and always gets the actual value.
            </summary>
        </member>
        <member name="M:Rainbow.Setup.Update.UpdateEntry.CompareTo(System.Object)">
            <summary>
            IComparable.CompareTo implementation.
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.PortalSettings">
            <summary>
            PortalSettings Class encapsulates all of the settings 
            for the Portal, as well as the configuration settings required 
            to execute the current tab view within the portal.
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.ActiveTab">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.CustomSettings">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.DesktopTabs">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.DesktopTabsXml">
            <summary>
            Jes
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.MobileTabs">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.PortalAlias">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.PortalID">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.PortalName">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.PortalTitle">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.Scheduler">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings.ShowTabs">
            <summary>
            Jes
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.PortalSettings._portalTabsXml">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.#ctor(System.Int32,System.String)">
            <summary>
            The PortalSettings Constructor encapsulates all of the logic
            necessary to obtain configuration settings necessary to render
            a Portal Tab view for a given request.<br/>
            These Portal Settings are stored within a SQL database, and are
            fetched below by calling the "GetPortalSettings" stored procedure.<br/>
            This stored procedure returns values as SPROC output parameters,
            and using three result sets.
            </summary>
            <param name="tabID"></param>
            <param name="portalAlias"></param>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.#ctor(System.Int32)">
            <summary>
            The PortalSettings Constructor encapsulates all of the logic
            necessary to obtain configuration settings necessary to get
            custom setting for a different portal than current (EditPortal.aspx.cs)<br/>
            These Portal Settings are stored within a SQL database, and are
            fetched below by calling the "GetPortalSettings" stored procedure.<br/>
            This overload it is used 
            </summary>
            <param name="PortalID"></param>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.FlushBaseSettingsCache(System.String)">
            <summary>
                
            </summary>
            <param name="PortalPath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetCurrentTheme">
            <summary>
            Theme definition and images
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetCurrentTheme(System.String)">
            <summary>
                
            </summary>
            <param name="requiredTheme" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A Rainbow.Design.Theme value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetCurrentUserProfile(System.Int32)">
            <summary>
            The PortalSettings.GetCurrentUserProfile Method returns a hashtable of
            all the fields and their values for currently logged user in the users table.
            Used to retrieve a specific profile detail about the current user, without knowing whether the field exists in the user table or not.
            </summary>
            <param name="PortalID"></param>
            <returns>A Hashtable with containing all field values for the current user's user record</returns>
            <remarks>
            Added by gman3001 9/29/2004
            </remarks>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetDesktopTabsXml">
            <summary>
            Massages existing DesktopTabs ArrayList a bit, 
            so that it can be serialized into an XPathDocument
            which can be used to retrieve tabs hierarchy data
            without hitting the database
            </summary>
            <returns>xpd</returns>
            <remarks>
             Jes1111
            </remarks>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetParentTabID(System.Int32,System.Collections.ArrayList)">
            <summary>
            Get the ParentTabID of a certain Tab 06/11/2004 Rob Siera
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetPortalBaseSettings(System.String)">
            <summary>
                
            </summary>
            <param name="PortalPath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Collections.Hashtable value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetPortalCustomSettings(System.Int32,System.Collections.Hashtable)">
            <summary>
            The PortalSettings.GetPortalSettings Method returns a hashtable of
            custom Portal specific settings from the database. This method is
            used by Portals to access misc settings.
            </summary>
            <param name="portalID"></param>
            <param name="_baseSettings"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetProxy">
            <summary>
            Get the proxy parameters as configured in web.config by Phillo 22/01/2003
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetRootTab(System.Int32,System.Collections.ArrayList)">
            <summary>
            The get tab root should get the first level tab:
            <pre>
            + Root
            	+ Tab1
            		+ SubTab1		-> returns Tab1
            	+ Tab2
            		+ SubTab2		-> returns Tab2
            			+ SubTab2.1 -> returns Tab2
            </pre>
            </summary>
            <param name="parentTabID"></param>
            <param name="tabList"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetRootTab(Rainbow.Configuration.TabSettings,System.Collections.ArrayList)">
            <summary>
            The GetRootTab should get the first level tab:
            <pre>
            + Root
            	+ Tab1
            		+ SubTab1		-> returns Tab1
            	+ Tab2
            		+ SubTab2		-> returns Tab2
            			+ SubTab2.1 -> returns Tab2
            </pre>
            </summary>
            <param name="tab"></param>
            <param name="tabList"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetStringResource(System.String)">
            <summary>
            Get resource
            </summary>
            <param name="resourceID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetStringResource(System.String,System.String[])">
            <summary>
            Get resource
            </summary>
            <param name="resourceID"></param>
            <param name="_localize"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.UpdatePortalSetting(System.Int32,System.String,System.String)">
            <summary>
            The UpdatePortalSetting Method updates a single module setting
            in the PortalSettings database table.
            </summary>
            <param name="portalID"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.GetLanguageList(System.String)">
            <summary>
            Get languages list from Portaldb
            </summary>
            <param name="portalAlias"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.RecursePortalTabsXml(Rainbow.Configuration.TabStripDetails,System.Xml.XmlTextWriter)">
            <summary>
                
            </summary>
            <param name="myTab" type="Rainbow.Configuration.TabStripDetails">
                <para>
                    
                </para>
            </param>
            <param name="writer" type="System.Xml.XmlTextWriter">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalSettings.setActiveModuleCookie(System.Int32)">
            <summary>
                
            </summary>
            <param name="mID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.GetTermsOfService">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.ActiveModule">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.ADUserName">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.ADUserPassword">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.AllowEditUserID">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.ApplicationFullPath">
            <summary>
            ApplicationPath, Application dependent.
            Used by newsletter. Needed if you want to reference a page
            from an external resource (an email for example)
            Since it is common for all portals is declared as static.
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.ApplicationPath">
            <summary>
            ApplicationPath, Application dependent relative Application Path.
            Base dir for all portal code
            Since it is common for all portals is declared as static
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.ApplicationPhisicalPath">
            <summary>
            ApplicationPhisicalPath.
            File system property
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.CodeVersion">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.CurrentLayout">
            <summary>
            Current Layout
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.CurrentUser">
            <summary>
            CurrentUser
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.DatabaseVersion">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.EnableADUser">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.GetPortalUniqueID">
            <summary>
            This static string fetches the portal's alias either via querystring, cookie or domain and returns it
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.IsMonitoringEnabled">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalContentLanguage">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalDataFormattingCulture">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalFullPath">
            <summary>
            PortalPath.
            Base dir for all portal data, relative to root web dir.
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalLayoutPath">
            <summary>
            PortalLayoutPath is the full path in which all Layout files are
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalPath">
            <summary>
            PortalPath.
            Base dir for all portal data, relative to application
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalSecurePath">
            <summary>
            PortalSecurePath.
            Base dir for SSL
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalTabsXml">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.PortalUILanguage">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.ProductVersion">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.SmtpServer">
            <summary>
            SmtpServer
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.SqlConnectionString">
            <summary>
            Database connection
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.PortalSettings.UseSingleUserBase">
            <summary>
            If true all users will be loaded from portal 0 instance
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.MenuData">
            <summary>
            This is a temporary class to support DesktopTabsXml.
            Since PortalSettings.DesktopTab is not directly serializable,
            GetDesktopTabsXml uses this class to get the job done.
            
            </summary>
            <remarks>
            Jes1111
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.MenuData.TabsBox">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Design.PictureItem">
            <summary>
            PictureItem
            </summary>
        </member>
        <member name="F:Rainbow.Design.PictureItem.editLink">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.PictureItem.metadata">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Design.PictureItem.GetCurrentImageFromTheme(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="bydefault" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.PictureItem.GetMetadata(System.String)">
            <summary>
                
            </summary>
            <param name="key" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.PictureItem.OnInit(System.EventArgs)">
            <summary>
                
            </summary>
            <param name="e" type="System.EventArgs">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.PictureItem.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rainbow.Design.PictureItem.Metadata">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Helpers.IOHelper">
            <summary>
            Summary description for IOHelper.
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.IOHelper.GetFiles(System.String,System.String)">
            <summary>
            Returns the names of files in the specified directory that match the specified searchpatterns.
            </summary>
            <param name="path">the directory to search.</param>
            <param name="searchPatterns">the search strings to match against the names of files in the path deliminated by a ';'. For example:"*.gif;*.xl?;my*.txt"</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.IOHelper.CreateDirectory(System.String)">
            <summary>
            Creates all directories and subdirectories as specified and return false in case of an error.
            </summary>
            <param name="physicalPath"></param>
            <returns></returns>
        </member>
        <member name="T:Rainbow.Design.LayoutItem">
            <summary>
            LayoutItem encapsulates the items of Layout list.
            Uses IComparable interface to allow sorting by name.
            </summary>
            <remarks>by Cory Isakson</remarks>
        </member>
        <member name="F:Rainbow.Design.LayoutItem._name">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Design.LayoutItem.CompareTo(System.Object)">
            <summary>
                
            </summary>
            <param name="value" type="object">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="P:Rainbow.Design.LayoutItem.Name">
            <summary>
            The name of the layout
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.PageKeyPhrase">
            <summary>
            Created By john.mandia@whitelightsolutions.com - This control is used by the PageKeyPhrase Module.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.PageKeyPhrase.OnLoad(System.EventArgs)">
            <summary>
            Load event handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.PageKeyPhrase.TabKeyPhrase">
            <summary>
            Stores current Tab Key Phrase
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.PagePropertyPage">
            <summary>
            Summary description for Property Page
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.PagePropertyPage.OnInit(System.EventArgs)">
            <summary>
            On init
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.DesktopModules.PagePropertyPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.PagePropertyPage.OnUpdate(System.EventArgs)">
            <summary>
            Persists the changes to database
            </summary>
        </member>
        <member name="T:Rainbow.Design.Layout">
            <summary>
            The Layout class encapsulates all the settings
            of the currently selected layout
            </summary>
            <remarks>by Cory Isakson</remarks>
        </member>
        <member name="F:Rainbow.Design.Layout.WebPath">
            <summary>
            Current Web Path.
            It is set at runtime and therefore is not serialized
            </summary>
        </member>
        <member name="P:Rainbow.Design.Layout.Name">
            <summary>
            The Layout Name (must be the directory in which is located)
            </summary>
        </member>
        <member name="P:Rainbow.Design.Layout.Path">
            <summary>
            Current Phisical Path. Readonly.
            </summary>
        </member>
        <member name="T:Rainbow.Design.ThemePart">
            <summary>
            A single named HTML fragment
            </summary>
        </member>
        <member name="M:Rainbow.Design.ThemePart.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.ThemePart.#ctor(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="html" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="P:Rainbow.Design.ThemePart.Html">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Design.ThemePart.Name">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Helpers.SearchDefinition">
            <summary>
            This struct stores custom parametes needed by
            the search helper for do the search string.
            This make the search string consistent and easy
            to change without modify all the searchable modules
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.SearchDefinition.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="tableName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="titleField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="abstractField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="searchField" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.SearchDefinition.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="tableName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="titleField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="abstractField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="createdByUserField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="createdDateField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="searchField" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.SearchDefinition.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="tableName" type="string">
                <para>
                    
                </para>
            </param>
            <param name="tabIDField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="itemIDField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="titleField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="abstractField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="createdByUserField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="createdDateField" type="string">
                <para>
                    
                </para>
            </param>
            <param name="searchField" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.TableName">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.TabIDField">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.ItemIDField">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.TitleField">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.AbstractField">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.CreatedByUserField">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.CreatedDateField">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.SearchDefinition.ArrSearchFields">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Helpers.SearchDefinition.SearchSqlSelect(System.Int32,System.Int32,System.String)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="userID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="searchStr" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.SearchDefinition.FilterString(System.String)">
            <summary>
            SQL injection prevention
            </summary>
            <param name="toClean"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.SearchDefinition.SearchSqlSelect(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Builds a SELECT query using given parameters
            </summary>
            <param name="portalID"></param>
            <param name="userID"></param>
            <param name="searchStr"></param>
            <returns></returns>
        </member>
        <member name="T:Rainbow.UI.WebControls.FreeTextBox">
            <summary>
             FreeTextBox is a wrapper for FreeTextBoxControls.FreeTextBox
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FreeTextBox.Rainbow#UI#WebControls#IHtmlEditor#get_Text">
            <summary>
             FreeTextBox is a wrapper for FreeTextBoxControls.FreeTextBox
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FreeTextBox.Rainbow#UI#WebControls#IHtmlEditor#set_Text(System.String)">
            <summary>
             FreeTextBox is a wrapper for FreeTextBoxControls.FreeTextBox
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FreeTextBox.Rainbow#UI#WebControls#IHtmlEditor#get_Height">
            <summary>
             FreeTextBox is a wrapper for FreeTextBoxControls.FreeTextBox
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FreeTextBox.Rainbow#UI#WebControls#IHtmlEditor#set_Height(System.Web.UI.WebControls.Unit)">
            <summary>
             FreeTextBox is a wrapper for FreeTextBoxControls.FreeTextBox
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FreeTextBox.Rainbow#UI#WebControls#IHtmlEditor#get_Width">
            <summary>
             FreeTextBox is a wrapper for FreeTextBoxControls.FreeTextBox
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.FreeTextBox.Rainbow#UI#WebControls#IHtmlEditor#set_Width(System.Web.UI.WebControls.Unit)">
            <summary>
             FreeTextBox is a wrapper for FreeTextBoxControls.FreeTextBox
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.FreeTextBox.ImageFolder">
            <summary>
            Control Image Folder
            </summary>
        </member>
        <member name="M:Rainbow.UI.ViewItemPage.OnInit(System.EventArgs)">
            <summary>
            Handles OnInit event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.ViewItemPage.OnCancel(System.EventArgs)">
            <summary>
            Handles OnCancel event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.ViewItemPage.OnUpdate(System.EventArgs)">
            <summary>
            Handles OnUpdate event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.ViewItemPage.OnDelete(System.EventArgs)">
            <summary>
            Handles OnDelete
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.UI.ViewItemPage.LoadSettings">
            <summary>
            Load settings
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.HtmlEditorDataType">
            <summary>
            List of available HTML editors
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.ApplicationUrlDataType">
            <summary>
            ApplicationUrlDataType
            </summary>
        </member>
        <member name="T:Rainbow.DesktopModules.EmailForm">
            <summary>
            Summary description for EmailForm.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.EmailForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:Rainbow.DesktopModules.EmailForm.To">
            <summary>
            Collection containing all to email addresses
            </summary>
        </member>
        <member name="P:Rainbow.DesktopModules.EmailForm.Cc">
            <summary>
            Collection containing all cc email addresses
            </summary>
        </member>
        <member name="P:Rainbow.DesktopModules.EmailForm.Bcc">
            <summary>
            Collection containing all bcc email addresses
            </summary>
        </member>
        <member name="P:Rainbow.DesktopModules.EmailForm.Subject">
            <summary>
            Contains subject
            </summary>
        </member>
        <member name="P:Rainbow.DesktopModules.EmailForm.HtmlBodyText">
            <summary>
            Contains text for the body of the email in html format
            </summary>
        </member>
        <member name="P:Rainbow.DesktopModules.EmailForm.BodyText">
            <summary>
            Contains text for the body of the email in plain text format
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.BooleanDataType">
            <summary>
            BooleanDataType
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.HtmlTextBox">
            <summary>
            HtmlTextBox is a wrapper for ActiveUp.HtmlTextBox.HtmlTextBox.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.HtmlTextBox.Rainbow#UI#WebControls#IHtmlEditor#get_Text">
            <summary>
            HtmlTextBox is a wrapper for ActiveUp.HtmlTextBox.HtmlTextBox.
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.HtmlTextBox.Rainbow#UI#WebControls#IHtmlEditor#set_Text(System.String)">
            <summary>
            HtmlTextBox is a wrapper for ActiveUp.HtmlTextBox.HtmlTextBox.
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HtmlTextBox.ImageFolder">
            <summary>
            Control Image Folder
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.CustomForm">
            <summary>
            This is a server form that is able to post to a different page than than the one it is on.
            Simply set the Action property to whatever page you want.
            This control is available from the great MetaBuilders site http://www.metabuilders.com
            </summary>
            <example>
            The following is an example page which posts a server form to google's search engine.
            <code>
            <![CDATA[
            <%@ Register TagPrefix="rbc" Namespace="Rainbow.UI.WebControls" Assembly="Rainbow" %>
            <html><body>
            	<rbc:CustomForm runat="server" Method="Get" Action="http://www.google.com/search">
            		<asp:TextBox id="q" runat="server"></asp:TextBox>
            		<asp:Button runat="server" Text="Google Search" />
            	</rbc:CustomForm>
            </body></html>
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Rainbow.UI.WebControls.CustomForm.RenderAttributes(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overridden to render custom Action attribute
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.CustomForm.GetBaseActionAttribute">
            <summary>
            Uses reflection to get the result of the private implementation of GetActionAttribute of the base class.
            </summary>
            <returns>Returns the normal action attribute of a server form.</returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.CustomForm.GetHiddenProperty(System.Object,System.Type,System.String)">
            <summary>
            Uses reflection to access any property on an object, even tho the property is marked protected, internal, or private.
            </summary>
            <param name="target">The object being accessed</param>
            <param name="targetType">The Type to examine. Usually the Type of target arg, but sometimes a superclass of it.</param>
            <param name="propertyName">The name of the property to access.</param>
            <returns>The value of the property, or null if the property is not found.</returns>
        </member>
        <member name="P:Rainbow.UI.WebControls.CustomForm.Action">
            <summary>
            Gets or sets the target url of the form post.
            </summary>
            <remarks>Leave blank to postback to the same page.</remarks>
        </member>
        <member name="P:Rainbow.UI.WebControls.CustomForm.Page_ClientOnSubmitEvent">
            <summary>
            Uses reflection to access the ClientOnSubmitEvent property of the Page class
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.ShopNavigation">
            <summary>
            Menu navigation inherits from Menu Webcontrol
            and adds the 'glue' to link to tabs tree.
            Bugfix #656794 'Menu rendering adds all tabs' by abain
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ShopNavigation.DataBind">
            <summary>
            Do databind.
            Thanks to abain for cleaning up the code
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.ShopNavigation.AddMenuTreeNode(System.Int32,Rainbow.Configuration.TabStripDetails)">
            <summary> 
            Add a Menu Tree Node if user in in the list of Authorized roles. 
            Thanks to abain for fixing authorization bug.
            </summary> 
            <param name="tabIndex">Index of the tab</param> 
            <param name="myTab">Tab to add to the MenuTreeNodes collection</param> 
        </member>
        <member name="P:Rainbow.UI.WebControls.ShopNavigation.AutoBind">
            <summary> 
            Indicates if control should bind when loads 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.ShopNavigation.Bind">
            <summary> 
            Describes how this control should bind to db data 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.ShopNavigation.ParentTabID">
            <summary>
            defines the parentTabID when using BindOptionDefinedParent
            </summary>
        </member>
        <member name="T:Rainbow.UI.Design.PagingDesigner">
            <summary>
            Designer support for paging
            </summary>
        </member>
        <member name="M:Rainbow.UI.Design.PagingDesigner.GetDesignTimeHtml">
            <summary>
            Component is the instance of the component or control that
            this designer object is associated with. This property is 
            inherited from System.ComponentModel.ComponentDesigner.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rainbow.DesktopModules.RequestModuleContentApproval">
            <summary>
            Summary description for RequestModuleContentApproval.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.RequestModuleContentApproval.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.TabStripDetails">
            <summary>
            TabStripDetails Class encapsulates the tabstrip details
            -- TabName, TabID and TabOrder -- for a specific Tab in the Portal
            </summary>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.AuthorizedRoles">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.ParentTabID">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.TabImage">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.TabIndex">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.TabLayout">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.TabName">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.TabOrder">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Configuration.TabStripDetails.tabID">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.TabStripDetails.TabID">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Configuration.TabStripDetails.Tabs">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.UI.DataTypes.CheckBoxListDataType">
            <summary>
            CheckBoxListDataType
            Implements a checkboxlist that allows multiple selections 
            (returns a colon-delimited string)
            by Mike Stone
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.PortalsDB">
            <summary>
            Class that encapsulates all data logic necessary to add/query/delete
            Portals within the Portal database.
            
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.AddPortal(System.String,System.String,System.String)">
            <summary>
            The AddPortal method add a new portal.<br />
            AddPortal Stored Procedure
            </summary>
            <param name="portalAlias"></param>
            <param name="portalName"></param>
            <param name="portalPath"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.CreatePortal(System.Int32,System.String,System.String,System.String)">
            <summary>
            The CreatePortal method create a new basic portal based on solutions table.
            </summary>
            <param name="solutionID"></param>
            <param name="portalAlias"></param>
            <param name="portalName"></param>
            <param name="portalPath"></param>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.CreatePortalPath(System.String)">
            <summary>
                
            </summary>
            <param name="portalPath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.DeletePortal(System.Int32)">
            <summary>
            Removes portal from database. All tabs, modules and data wil be removed.
            </summary>
            <param name="portalID"></param>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.GetPortals">
            <summary>
            The GetPortals method returns a SqlDataReader containing all of the
            Portals registered in this database.<br/>
            GetPortal Stored Procedure
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.GetPortalsArrayList">
            <summary>
            The GetPortals method returns a SqlDataReader containing all of the
            Portals registered in this database.<br/>
            GetPortal Stored Procedure
            </summary>
            <returns>portals</returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.GetTemplates">
            <summary>
            The GetTemplates method returns a SqlDataReader containing all of the
            Templates Availables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.UpdatePortalInfo(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            The UpdatePortalInfo method updates the name and access settings for the portal.<br />
            Uses UpdatePortalInfo Stored Procedure.
            </summary>
            <param name="portalID"></param>
            <param name="portalName"></param>
            <param name="portalPath"></param>
            <param name="alwaysShow"></param>
        </member>
        <member name="M:Rainbow.Configuration.PortalsDB.UpdatePortalSetting(System.Int32,System.String,System.String)">
            <summary>
            The UpdatePortalSetting Method updates a single module setting
            in the PortalSettings database table.
            </summary>
            <param name="portalID"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:Rainbow.BLL.Utils.GlobalResources">
            <summary>
            Summary description for GlobalResources.
            </summary>
        </member>
        <member name="F:Rainbow.BLL.Utils.GlobalResources.HTML_SPACE">
            <summary>
            non breakable html space character
            </summary>
        </member>
        <member name="M:Rainbow.BLL.Utils.GlobalResources.SafeBoolean(System.String,System.Boolean)">
            <summary>
            Get Boolean Resource
            </summary>
            <param name="name"></param>
            <param name="default_ret"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.Utils.GlobalResources.SafeInt(System.String,System.Int32)">
            <summary>
            Get Integer Resource
            </summary>
            <param name="name"></param>
            <param name="default_ret"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.Utils.GlobalResources.SafeString(System.String,System.String)">
            <summary>
            Get string Resource
            </summary>
            <param name="name"></param>
            <param name="default_ret"></param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.BLL.Utils.GlobalResources.SupportWindowMgmt">
            <summary>
            Does the Portal support WIndow Mgmt Functions/Controls
            </summary>
        </member>
        <member name="P:Rainbow.BLL.Utils.GlobalResources.SupportWindowMgmtClose">
            <summary>
            Do we support the close button
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.BindOption.BindOptionNone">
            <summary>
            No bind. Control will be filled by external procedure
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.BindOption.BindOptionTop">
            <summary>
            First level will be binded. The topmost series of tabs (Home and sibilings)
            If structure permits, all decendents will also be bound.
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.BindOption.BindOptionCurrentChilds">
            <summary>
            Bind level under root level. (2nd level)
            If structure permits, all decendents will also be bound.
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.BindOption.BindOptionSubtabSibling">
            <summary>
            If at root, bind children.  Otherwise bind siblings.
            If structure permits, all decendents will also be bound.
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.BindOption.BindOptionChildren">
            <summary>
            Children of current tab will be bound. (All the tabs that have current tab as parent)
            If structure permits, all decendents will also be bound.
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.BindOption.BindOptionSiblings">
            <summary>
            Siblings of current tab will be bound. (Along with current tab)
            If structure permits, all decendents will also be bound.
            </summary>
        </member>
        <member name="F:Rainbow.UI.WebControls.BindOption.BindOptionDefinedParent">
            <summary>
            Use the variable BindParent.
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.HeaderImage">
            <summary>
            HeaderImage
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.HeaderImage.DataBind">
            <summary>
            DataBind
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.WebPart">
            <summary>
            WebPart
            Added by Jakob Hansen.
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.AllowMinimize">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.AllowRemove">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.AutoUpdate">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.CacheBehavior">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.CacheTimeout">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.Content">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.ContentLink">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.ContentType">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.CustomizationLink">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.Description">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.DetailLink">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.FrameState">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.HasFrame">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.Height">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.HelpLink">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.IsIncluded">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.IsVisible">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.LastModified">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.MasterPartLink">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.Namespace">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.PartImageLarge">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.PartImageSmall">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.PartOrder">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.PartStorage">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.RequiresIsolation">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.Title">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.Width">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.XSL">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.XSLLink">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.WebPart.Zone">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Helpers.WebPartParser">
            <summary>
            WebPartParser
            Added by Jakob Hansen.
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.WebPartParser.Load(System.String)">
            <summary>
                
            </summary>
            <param name="fileName" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A Rainbow.Helpers.WebPart value...
            </returns>
        </member>
        <member name="T:Rainbow.DesktopModules.LanguageSwitcher">
            <summary>
            Summary description for LanguageSwitcher.
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.LanguageSwitcher.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rainbow.DesktopModules.LanguageSwitcher.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.ADHelper">
            <summary>
            This class contains functions for Active Directory support
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.GetMemberList(System.Boolean,System.String,System.Web.Caching.Cache)">
            <summary>
                
            </summary>
            <param name="Refresh" type="bool">
                <para>
                    
                </para>
            </param>
            <param name="ADDomain" type="string">
                <para>
                    
                </para>
            </param>
            <param name="AppCache" type="System.Web.Caching.Cache">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.DataTable value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.GetUserGroups(System.String)">
            <summary>
            This function returns an array of strings consisting of the AD groups that this user belongs to.
            </summary>
            <param name="UserAccount">Windows user or group</param>
            <returns>Groups string array</returns>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.GetEmailAddresses(System.String)">
            <summary>
            This function returns an EmailAddressList object.
            </summary>
            <param name="Account">Windows user or group</param>
            <returns>EmailAddressList</returns>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.GetDomainRoot(System.String)">
            <summary>
                
            </summary>
            <param name="Domain" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.DirectoryServices.DirectoryEntry value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.GetNetbiosName(System.DirectoryServices.DirectoryEntry)">
            <summary>
                
            </summary>
            <param name="root" type="System.DirectoryServices.DirectoryEntry">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.GetUsersInGroup(System.DirectoryServices.DirectoryEntry,Rainbow.UI.DataTypes.EmailAddressList,System.Collections.ArrayList)">
            <summary>
                
            </summary>
            <param name="group" type="System.DirectoryServices.DirectoryEntry">
                <para>
                    
                </para>
            </param>
            <param name="eal" type="Rainbow.UI.DataTypes.EmailAddressList">
                <para>
                    
                </para>
            </param>
            <param name="searchedGroups" type="System.Collections.ArrayList">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.ADHelper.GetAccountType(System.DirectoryServices.DirectoryEntry)">
            <summary>
                
            </summary>
            <param name="entry" type="System.DirectoryServices.DirectoryEntry">
                <para>
                    
                </para>
            </param>
            <returns>
                A Rainbow.Helpers.ADHelper.ADAccountType value...
            </returns>
        </member>
        <member name="T:Rainbow.Helpers.ADHelper.ADAccountType">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Helpers.ADHelper.ADAccountType.None">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.ADHelper.ADAccountType.user">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.Helpers.ADHelper.ADAccountType.group">
            <summary>
                
            </summary>
        </member>
        <member name="T:Rainbow.UI.WebControls.SmartScroller">
            <summary>
            You can place this control an an aspx page (DesktopDefault.aspx for example) and it will retain scroll position on postback
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.IntegerDataType">
            <summary>
            IntegerDataType
            </summary>
        </member>
        <member name="T:Rainbow.Helpers.DBHelper">
            <summary>
            Summary description for DBHelper
            </summary>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.ExecuteScript(System.String,System.Boolean)">
            <summary>
            Execute script using transaction
            </summary>
            <param name="scriptPath"></param>
            <param name="useTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.ExecuteScript(System.String)">
            <summary>
            Execute script (no transaction)
            </summary>
            <param name="scriptPath"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.ExecuteScript(System.String,System.Data.SqlClient.SqlConnection,System.Boolean)">
            <summary>
            Execute script using transaction
            </summary>
            <param name="scriptPath"></param>
            <param name="myConnection"></param>
            <param name="useTransaction"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.ExecuteScript(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            Execute script (no transaction)
            </summary>
            <param name="scriptPath"></param>
            <param name="myConnection"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.ExecuteSQLScalar(System.String)">
            <summary>
                
            </summary>
            <param name="sql" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A object value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.ExeSQL(System.String)">
            <summary>
                
            </summary>
            <param name="sql" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A int value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.GetDataReader(System.String)">
            <summary>
                
            </summary>
            <param name="selectCmd" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.GetDataSet(System.String)">
            <summary>
                
            </summary>
            <param name="selectCmd" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.DataSet value...
            </returns>
        </member>
        <member name="M:Rainbow.Helpers.DBHelper.GetScript(System.String)">
            <summary>
            Get the script from a file
            </summary>
            <returns></returns>
        </member>
        <member name="T:Rainbow.BLL.User.UserLayoutMgr">
            ----------------------------------------------------------------------------
             <summary>
             Manages the user layout information
             </summary>
            ----------------------------------------------------------------------------
        </member>
        <member name="M:Rainbow.BLL.User.UserLayoutMgr.#ctor">
            <summary>
            User layout manager
            </summary>
        </member>
        <member name="M:Rainbow.BLL.User.UserLayoutMgr.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rainbow.BLL.User.UserLayoutMgr.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization function.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rainbow.BLL.User.UserLayoutMgr.UserLayout(System.Int32)">
            <summary>
            Find a module from the module id
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.User.UserLayoutMgr.Contains(System.Int32)">
            <summary>
            Conatins a module from the module id
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
            
        </member>
        <member name="M:Rainbow.BLL.User.UserLayoutMgr.Add(Rainbow.BLL.UserConfig.UserModuleSettings)">
            <summary>
            Add/Change a layout, copy over the old one if it exists
            </summary>
            <param name="layout"></param>
        </member>
        <member name="M:Rainbow.BLL.User.UserLayoutMgr.Remove(System.Int32)">
            <summary>
            Remove a layout
            </summary>
            <param name="moduleID"></param>
        </member>
        <member name="P:Rainbow.BLL.User.UserLayoutMgr.Modules">
            <summary>
            Get the modules in the user layout
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.UserLayoutMgr.Item(System.Int32)">
            <summary>
            Finf a module from the module id
            </summary>
            <param name="moduleID"></param>
            <returns></returns>
            
        </member>
        <member name="T:Rainbow.UI.WebControls.HeaderMenu">
            <summary>
            HeaderMenu
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.HeaderMenu.#ctor">
            <summary>
            HeaderMenu
            </summary>
        </member>
        <member name="M:Rainbow.UI.WebControls.HeaderMenu.GetHelpLink">
            <summary>
            Builds a help link for the header menu and registers it with the page
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.UI.WebControls.HeaderMenu.HandleSave(System.Object,System.EventArgs)">
            <summary>
            Handles the button event to save desktop
            </summary>
            <param name="sender"></param>
            <param name="evt"></param>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowHelp">
            <summary>
            If true shows a link to a Help Window
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowLogon">
            <summary>
            If true and user is not authenticated shows 
            a logon link in place of logoff
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowSecureLogon">
            <summary>
            If true and user is not authenticated shows 
            a SECURE logon link in place of logoff
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowHome">
            <summary>
            Whether show home link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowTabMan">
            <summary>
            Whether show Manage Tab link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowEditProfile">
            <summary>
            Whether Edit Profile link
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowWelcome">
            <summary>
            Whether Welcome Shows
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowLogOff">
            <summary>
            Whether Logoff Link Shows
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.ShowSaveDesktop">
            <summary>
            Whether Logoff ShowSaveDesktop Shows
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.DataBindOnInit">
            <summary>
            Whether Logoff Link Shows
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.HeaderMenu.DataSource">
            <summary>
            DataSource
            </summary>
        </member>
        <member name="T:Rainbow.PrintPage">
            <summary>
            Module print page
            </summary>
        </member>
        <member name="M:Rainbow.PrintPage.OnInit(System.EventArgs)">
            <summary>
            Raises the Init event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.PrintPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Error.ErrorPage404">
            <summary>
            Default 404 error page
            </summary>
        </member>
        <member name="M:Rainbow.Error.ErrorPage404.OnInit(System.EventArgs)">
            <summary>
            Raises the Init event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Error.ErrorPage404.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.UI.DataTypes.LangListDataType">
            <summary>
            LangListDataType
            </summary>
        </member>
        <member name="T:Rainbow.KickStarter.CommonClasses.Config">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.KickStarter.CommonClasses.Config.ConnectionString">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Security.User">
            <summary>
            User identity
            </summary>
        </member>
        <member name="M:Rainbow.Security.User.#ctor(System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.User.#ctor(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="type" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.User.#ctor(System.String,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="email" type="string">
                <para>
                    
                </para>
            </param>
            <param name="id" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.User.SetUserData(System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Security.User.ToString">
            <summary>
                
            </summary>
            
            <returns>
                A string value...
            </returns>
        </member>
        <member name="F:Rainbow.Security.User.m_userXmlData">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Security.User.Name">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Security.User.Email">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Security.User.ID">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Security.User.UserXmlData">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                jes1111
            </remarks>
        </member>
        <member name="T:Rainbow.KickStarter.CommonClasses.Error">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.Error.SqlMessage(System.Data.SqlClient.SqlException,System.String)">
            <summary>
                
            </summary>
            <param name="e" type="System.Data.SqlClient.SqlException">
                <para>
                    
                </para>
            </param>
            <param name="Object" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="T:Rainbow.UI.WebControls.BreadCrumbs">
            <summary>
            This user control will render the breadcrumb navigation for the current tab.
            It does not render anything when the user on a first level tab.
            Ver. 1.0 - 24 dec 2002 - First release by Cory Isakson
            Ver. 1.1 - 31 jan 2003 - Update by jes - see readme
            Ver. 2.0 - 28 feb 2003 - Update by Manu - Transformed in Table Webcontrol
                                     Cleaned up the code, added support for design time
            Ver. 2.1 - 25.04.2003  - Indah Fuldner: Display breadcrumbs if the user has click a tab link  (Without hit the Database again)
            </summary>
        </member>
        <member name="P:Rainbow.UI.WebControls.BreadCrumbs.TextCSSClass">
            <summary> 
            TextCSSClass 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.BreadCrumbs.LinkCSSClass">
            <summary> 
            LinkCSSClass 
            </summary> 
        </member>
        <member name="P:Rainbow.UI.WebControls.BreadCrumbs.Separator">
            <summary>
            Separator
            </summary>
        </member>
        <member name="T:Rainbow.Security.Monitoring">
            <summary>
            Monitoring class is called by the rainbow components to write an entry
            into the monitoring database table.  It is used to maintain and show
            site statistics such as who has logged on and at what time.
            Written by Paul Yarrow, paul@paulyarrow.com
            </summary>
        </member>
        <member name="M:Rainbow.Security.Monitoring.LogEntry(System.Int64,System.Int32,System.Int64,System.String,System.String)">
            <summary>
                
            </summary>
            <param name="userID" type="long">
                <para>
                    
                </para>
            </param>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="pageID" type="long">
                <para>
                    
                </para>
            </param>
            <param name="actionType" type="string">
                <para>
                    
                </para>
            </param>
            <param name="userField" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="T:Rainbow.Design.Theme">
            <summary>
            The Theme class encapsulates all the settings
            of the currently selected theme
            </summary>
        </member>
        <member name="F:Rainbow.Design.Theme.DefaultButtonPath">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.Theme.ThemeImages">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.Theme.ThemeParts">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.Theme._Css">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.Theme._minimize_color">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.Theme._name">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.Theme._webPath">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.Theme.type">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Design.Theme.GetHTMLPart(System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.Theme.GetImage(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="defaultImagePath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Web.UI.WebControls.Image value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.Theme.GetImage(System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Web.UI.WebControls.Image value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.Theme.GetLiteralControl(System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Web.UI.LiteralControl value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.Theme.GetLiteralImage(System.String,System.String)">
            <summary>
                
            </summary>
            <param name="name" type="string">
                <para>
                    
                </para>
            </param>
            <param name="defaultImagePath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A string value...
            </returns>		
        </member>
        <member name="M:Rainbow.Design.Theme.GetThemePart(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
            <remarks>
            added: Jes1111 - 2004/08/27
            Part of Zen support
            </remarks>
        </member>
        <member name="P:Rainbow.Design.Theme.Css">
            <summary>
            Get the Css file name without any path.
            </summary>
        </member>
        <member name="P:Rainbow.Design.Theme.CssFile">
            <summary>
            Get the Css phisical file name.
            Set at runtime using Web Path.
            </summary>
        </member>
        <member name="P:Rainbow.Design.Theme.MinimizeColor">
            <summary>
            [START FUTURE bja:C1]
            The Theme minimize color 
            </summary>
        </member>
        <member name="P:Rainbow.Design.Theme.Name">
            <summary>
            The Theme Name (must be the directory in which is located)
            </summary>
        </member>
        <member name="P:Rainbow.Design.Theme.Path">
            <summary>
            Current Phisical Path. Readonly.
            </summary>
        </member>
        <member name="P:Rainbow.Design.Theme.ThemeFileName">
            <summary>
            Get the Theme physical file name.
            Set at runtime using Physical Path. NonSerialized.
            </summary>
        </member>
        <member name="P:Rainbow.Design.Theme.Type">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="P:Rainbow.Design.Theme.WebPath">
            <summary>
            Current Web Path.
            It is set at runtime and therefore is not serialized
            </summary>
        </member>
        <member name="T:Rainbow.BLL.User.UserWindowMgmt">
            <summary>
            Summary description for UserWindowMgmt.
            Server-side state management of user layout
            </summary>
        </member>
        <member name="F:Rainbow.BLL.User.UserWindowMgmt.UKEY_">
            <summary>
             Private Data Section
            </summary>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.#ctor(System.String)">
            <summary>
            Ctor of the user session
            </summary>
            <param name="uid"></param>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.Contains(System.Int32)">
            <summary>
            Does this module/key exists
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.Add(Rainbow.BLL.UserConfig.UserModuleSettings)">
            <summary>
            Add a module setting
            </summary>
            <param name="ums"></param>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.Remove(System.Int32)">
            <summary>
            Remove module
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.Serialize">
            <summary>
            Serialize data
            </summary>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.addSessionUser(System.String,Rainbow.BLL.Utils.IWebBagHolder@)">
            <summary>
            Add user information layout to the session
            </summary>
            <param name="uid"> user id</param>
            <param name="user_bag"> Session Bag</param>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.makeKey(System.String)">
            <summary>
            Create a user id key  for the session
            </summary>
            <param name="uid"> user id </param>
            <returns>a user id string</returns>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.serialize(System.String,Rainbow.BLL.Utils.IWebBagHolder@)">
            <summary>
            Serialize the user data
            </summary>
            <param name="key"></param>
            <param name="user_bag"></param>
        </member>
        <member name="M:Rainbow.BLL.User.UserWindowMgmt.deserialize(System.String,Rainbow.BLL.Utils.IWebBagHolder@)">
            <summary>
            Deserialize the data to get the layout mgr.
            </summary>
            <param name="key"></param>
            <param name="user_bag"></param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.BLL.User.UserWindowMgmt.Modules">
            <summary>
            Get list of modules
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.UserWindowMgmt.LayoutManager">
            <summary>
            Get the user layout manager
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.UserWindowMgmt.Item(System.Int32)">
            	<summary>
            	Default property for accessing resources
             <param name="index">
             Index for the desired resource</param>
             <returns>
             Resource string value</returns>
            </summary>
        </member>
        <member name="T:Rainbow.KickStarter.CommonClasses.Action">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.KickStarter.CommonClasses.Action.Select">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.KickStarter.CommonClasses.Action.Insert">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.KickStarter.CommonClasses.Action.Update">
            <summary>
                
            </summary>
        </member>
        <member name="F:Rainbow.KickStarter.CommonClasses.Action.Delete">
            <summary>
                
            </summary>
        </member>
        <member name="T:Rainbow.KickStarter.CommonClasses.DataChangeEventHandler">
            <summary>
            Purpose: Delegate used in RowSelect, RowInsert, RowUpdate and RowDelete Events.
            </summary>
            <param name="sender" type="object">The object that raised the event.</param>
            <param name="e" type="DataChangeEventArgs">The Event Arguments, Contains Action (Select, Insert, Update, Delete).</param>
        </member>
        <member name="T:Rainbow.KickStarter.CommonClasses.DataChangeEventArgs">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.DataChangeEventArgs.#ctor">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.KickStarter.CommonClasses.DataChangeEventArgs.#ctor(Rainbow.KickStarter.CommonClasses.Action)">
            <summary>
                
            </summary>
            <param name="action" type="Rainbow.KickStarter.CommonClasses.Action">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="P:Rainbow.KickStarter.CommonClasses.DataChangeEventArgs.Action">
            <summary>
                
            </summary>
            <value>
                <para>
                    
                </para>
            </value>
            <remarks>
                
            </remarks>
        </member>
        <member name="T:Rainbow.Security.RainbowPrincipal">
            <summary>
            RainbowPrincipal
            </summary>
        </member>
        <member name="M:Rainbow.Security.RainbowPrincipal.#ctor(System.Security.Principal.IIdentity,System.String[])">
            <summary>
                
            </summary>
            <param name="identity" type="System.Security.Principal.IIdentity">
                <para>
                    
                </para>
            </param>
            <param name="roles" type="string[]">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="P:Rainbow.Security.RainbowPrincipal.Identity">
            <summary>
            Get the Rainbow User
            </summary>
        </member>
        <member name="T:Rainbow.Admin.LogonPage">
            <summary>
            Single click logon, useful for email and newsletters
            </summary>
        </member>
        <member name="M:Rainbow.Admin.LogonPage.OnInit(System.EventArgs)">
            <summary>
            Raises the Init event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rainbow.Admin.LogonPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.SettingItem">
            <summary>
            This class holds a single setting in the hashtable,
            providing information about datatype, costrains.
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.SettingItem.#ctor(Rainbow.UI.DataTypes.BaseDataType,System.String)">
            <summary>
            SettingItem
            </summary>
            <param name="dt"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.Configuration.SettingItem.#ctor(Rainbow.UI.DataTypes.BaseDataType)">
            <summary>
            SettingItem
            </summary>
            <param name="dt"></param>
        </member>
        <member name="M:Rainbow.Configuration.SettingItem.op_Implicit(Rainbow.Configuration.SettingItem)~System.String">
            <summary>
            ToString converter operator
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.SettingItem.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.SettingItem.CompareTo(System.Object)">
            <summary>
            Public comparer
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.Group">
            <summary>
            Allows grouping of settings in SettingsTable - use 
            Rainbow.Configuration.SettingItemGroup enum (convert to string)
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.GroupDescription">
            <summary>
            It provides a description in plain English for
            Group Key (readonly)
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.Description">
            <summary>
            Provide help for parameter. 
            Should be a brief, descriptive text that explains what
            this setting should do.
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.EnglishName">
            <summary>
            It is the name of the parameter in plain english.
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.FullPath">
            <summary>
            FullPath
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.Required">
            <summary>
            Required
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.DataType">
            <summary>
            DataType
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.EditControl">
            <summary>
            EditControl
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.MinValue">
            <summary>
            MinValue
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.MaxValue">
            <summary>
            MaxValue
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.DataSource">
            <summary>
            DataSource
            </summary>
        </member>
        <member name="P:Rainbow.Configuration.SettingItem.Order">
            <summary>
            Display Order - use Rainbow.Configuration.SettingItemGroup enum 
            (add integer in range 1-999)
            </summary>
        </member>
        <member name="T:Rainbow.Configuration.TabsDB">
            <summary>
            Class that encapsulates all data logic necessary to add/query/delete
            Portals within the Portal database.
            </summary>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.AddTab(System.Int32,System.String,System.Int32)">
            <summary>
            The AddTab method adds a new tab to the portal.<br />
            AddTab Stored Procedure
            </summary>
            <param name="portalID"></param>
            <param name="tabName"></param>
            <param name="tabOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.AddTab(System.Int32,System.String,System.String,System.Int32)">
            <summary>
            The AddTab method adds a new tab to the portal.<br />
            AddTab Stored Procedure
            </summary>
            <param name="portalID"></param>
            <param name="tabName"></param>
            <param name="Roles"></param>
            <param name="tabOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.AddTab(System.Int32,System.Int32,System.String,System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            The AddTab method adds a new tab to the portal.<br />
            AddTab Stored Procedure
            </summary>
            <param name="portalID"></param>
            <param name="parentTabID"></param> 
            <param name="tabName"></param>
            <param name="tabOrder"></param>
            <param name="authorizedRoles"></param>
            <param name="showMobile"></param>
            <param name="mobileTabName"></param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.DeleteTab(System.Int32)">
            <summary>
            The DeleteTab method deletes the selected tab from the portal.<br />
            DeleteTab Stored Procedure
            </summary>
            <param name="tabID"></param>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.GetTabCrumbs(System.Int32)">
            <summary>
            This user control will render the breadcrumb navigation for the current tab.
            Ver. 1.0 - 24. dec 2002 - First realase by Cory Isakson
            </summary>
            <param name="tabID">ID of the tab</param>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.GetTabsByPortal(System.Int32)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.GetTabsFlat(System.Int32)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Collections.ArrayList value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.GetTabsinTab(System.Int32,System.Int32)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="tabID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Collections.ArrayList value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.GetTabsParent(System.Int32,System.Int32)">
            <summary>
                
            </summary>
            <param name="portalID" type="int">
                <para>
                    
                </para>
            </param>
            <param name="tabID" type="int">
                <para>
                    
                </para>
            </param>
            <returns>
                A System.Data.SqlClient.SqlDataReader value...
            </returns>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.UpdateTab(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            UpdateTab Method<br />
            UpdateTab Stored Procedure
            </summary>
            <param name="portalID"></param>
            <param name="tabID"></param>
            <param name="parentTabID"></param>
            <param name="tabName"></param>
            <param name="tabOrder"></param>
            <param name="authorizedRoles"></param>
            <param name="mobileTabName"></param>
            <param name="showMobile"></param>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.UpdateTabCustomSettings(System.Int32,System.String,System.String)">
            <summary>
            Update Tab Custom Settings
            </summary>
            <param name="tabID"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Rainbow.Configuration.TabsDB.UpdateTabOrder(System.Int32,System.Int32)">
            <summary>
            The UpdateTabOrder method changes the position of the tab with respect
            to other tabs in the portal.<br />
            UpdateTabOrder Stored Procedure
            </summary>
            <param name="tabID"></param>
            <param name="tabOrder"></param>
        </member>
        <member name="T:Rainbow.com.google.api.GoogleSearchService">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.#ctor">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.doGetCachedPage(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.BegindoGetCachedPage(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.EnddoGetCachedPage(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.doSpellingSuggestion(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.BegindoSpellingSuggestion(System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.EnddoSpellingSuggestion(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.doGoogleSearch(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String,System.Boolean,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.BegindoGoogleSearch(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.String,System.Boolean,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:Rainbow.com.google.api.GoogleSearchService.EnddoGoogleSearch(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="T:Rainbow.com.google.api.GoogleSearchResult">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.documentFiltering">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.searchComments">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.estimatedTotalResultsCount">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.estimateIsExact">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.resultElements">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.searchQuery">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.startIndex">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.endIndex">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.searchTips">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.directoryCategories">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.GoogleSearchResult.searchTime">
            <remarks/>
        </member>
        <member name="T:Rainbow.com.google.api.ResultElement">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.summary">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.URL">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.snippet">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.title">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.cachedSize">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.relatedInformationPresent">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.hostName">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.directoryCategory">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.ResultElement.directoryTitle">
            <remarks/>
        </member>
        <member name="T:Rainbow.com.google.api.DirectoryCategory">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.DirectoryCategory.fullViewableName">
            <remarks/>
        </member>
        <member name="F:Rainbow.com.google.api.DirectoryCategory.specialEncoding">
            <remarks/>
        </member>
        <member name="T:Rainbow.BLL.User.UserFrameAppearanceStruct">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rainbow.BLL.User.UserFrameAppearanceStruct.MinimizeColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rainbow.BLL.User.UserFrameAppearanceStruct.FontColor">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rainbow.BLL.User.UserFrameAppearanceStruct.FontSize">
            <summary>
            
            </summary>
        </member>
        <member name="F:Rainbow.BLL.User.UserFrameAppearanceStruct.Font">
            <summary>
            
            </summary>
        </member>
        <member name="T:Rainbow.BLL.User.SingletonUserLayout">
            <summary>
            Summary description for SingletonUserLayout. This provides
            a fallback to resources if not found from persistant store
            </summary>
        </member>
        <member name="F:Rainbow.BLL.User.SingletonUserLayout.usr_app_">
            <summary>
            Data Section
            </summary>
        </member>
        <member name="F:Rainbow.BLL.User.SingletonUserLayout.instance">
            <summary>
            the singleton class instance (ONLY ONE -- APPLICATION LEVEL )
            </summary>
        </member>
        <member name="M:Rainbow.BLL.User.SingletonUserLayout.#ctor">
            <summary>
            the singleton class
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.SingletonUserLayout.ModuleFontSize">
            <summary>
            Frame font size
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.SingletonUserLayout.ModuleFont">
            <summary>
            Frame font 
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.SingletonUserLayout.ModuleFontColor">
            <summary>
            Frame font color
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.SingletonUserLayout.ModuleMinimizeColor">
            <summary>
            Frame minimize color
            </summary>
        </member>
        <member name="P:Rainbow.BLL.User.SingletonUserLayout.UserAppearance">
            <summary>
            Get the user appeareance
            </summary>
        </member>
        <member name="T:Rainbow.Design.LayoutManager">
            <summary>
            The LayoutManager class encapsulates all data logic necessary to
            use differents Layouts across the entire portal.
            Manages the Load and Save of the Layouts.
            Encapsulates a Layout object that contains all the settings
            of the current Layout.
            </summary>
            <remarks>by Cory Isakson</remarks>
        </member>
        <member name="F:Rainbow.Design.LayoutManager._portalPath">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="F:Rainbow.Design.LayoutManager.cachedLayoutsList">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Design.LayoutManager.#ctor(System.String)">
            <summary>
                
            </summary>
            <param name="portalPath" type="string">
                <para>
                    
                </para>
            </param>
            <returns>
                A void value...
            </returns>
        </member>
        <member name="M:Rainbow.Design.LayoutManager.ClearCacheList">
            <summary>
                
            </summary>
            
            <returns>
                A void value...
            </returns>
        </member>
        <member name="F:Rainbow.Design.LayoutManager.innerWebPath">
            <summary>
                
            </summary>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Rainbow.Design.LayoutManager.GetLayouts">
            <summary>
            Read the Path dir and returns
            an ArrayList with all the Layouts found, public and privates
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rainbow.Design.LayoutManager.GetPublicLayouts">
            <summary>
            Read the Path dir and returns an ArrayList with all the Layouts found.
            Static because the list is Always the same.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rainbow.Design.LayoutManager.WebPath">
            <summary>
            The path of the Layout dir (Web side)
            used to reference images
            </summary>
        </member>
        <member name="P:Rainbow.Design.LayoutManager.PortalWebPath">
            <summary>
            The path of the current portal Layout dir (Web side)
            used to reference images
            </summary>
        </member>
        <member name="P:Rainbow.Design.LayoutManager.Path">
            <summary>
            The path of the Layout dir (Phisical path)
            used to load Layouts
            </summary>
        </member>
        <member name="P:Rainbow.Design.LayoutManager.PortalLayoutPath">
            <summary>
            The path of the current portal Layout dir (Phisical path)
            used ot load Layouts
            </summary>
        </member>
    </members>
</doc>
